/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.davidbuzatto.computersupportedclasshelper.gui;

import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.BrushCurve;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Curve;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Ellipse;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.EraserCurve;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Grid;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Image;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Line;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.LineSheet;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Polygon;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Rectangle;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.RoundRectangle;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Shape;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Star;
import br.com.davidbuzatto.computersupportedclasshelper.gui.geom.Text;
import br.com.davidbuzatto.computersupportedclasshelper.gui.undo.AddShapeChangeAction;
import br.com.davidbuzatto.computersupportedclasshelper.gui.undo.RemoveShapeChangeAction;
import br.com.davidbuzatto.computersupportedclasshelper.gui.undo.ShapeChangeAction;
import br.com.davidbuzatto.computersupportedclasshelper.utils.Constants;
import br.com.davidbuzatto.computersupportedclasshelper.utils.DrawingConfigs;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Prof. Dr. David Buzatto
 */
public class MainWindow extends javax.swing.JFrame {

    private DrawingConfigs dConfig;
    
    private boolean drawing;
    private Shape currentShape;
    private Shape selectedShape;
    
    private double xPressed;
    private double yPressed;
    private double xPrev;
    private double yPrev;
    
    private SelectedRepaintRunnable selectedRepaintRunnable;
    private File currentFile;
    
    private boolean isShiftDown;
    
    private ShapeChangeAction movingSca;
    
    /**
     * Creates new form MainWindowa
     */
    public MainWindow( DrawingConfigs dConfig ) {
        
        initComponents();
        setTitle( getTitle() + " - " + Constants.VERSION );
        setBackground( new Color( 0, 0, 0, 0 ) );
        
        colorPanelSC1.setId( "1" );
        colorPanelSC2.setId( "2" );
        colorPanelSC3.setId( "3" );
        colorPanelSC4.setId( "4" );
        colorPanelSC5.setId( "5" );
        colorPanelSC6.setId( "6" );
        colorPanelSC7.setId( "7" );
        colorPanelSC8.setId( "8" );
        
        this.dConfig = dConfig;
        loadConfigurations();
        
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.PENCIL, null ) );
        updateLabelPages();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher( new ApplicationKeyEventDispatcher( this ) );
        
        //setExtendedState( Frame.MAXIMIZED_BOTH );
        setSize( Toolkit.getDefaultToolkit().getScreenSize() );
        setBounds( 0, 0, getWidth(), getHeight() - 20 );
        
        updateCrossCursorIfNeeded();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        buttonGroupLineSheetConfig = new javax.swing.ButtonGroup();
        buttonGroupGridConfig = new javax.swing.ButtonGroup();
        popupMenuNoColor = new javax.swing.JPopupMenu();
        menuItemNoColor = new javax.swing.JMenuItem();
        popupMenuShapeOptions = new javax.swing.JPopupMenu();
        menuItemEditText = new javax.swing.JMenuItem();
        sepShapeOptions1 = new javax.swing.JPopupMenu.Separator();
        menuItemDuplicate = new javax.swing.JMenuItem();
        sepShapeOptions2 = new javax.swing.JPopupMenu.Separator();
        menuMoveFront = new javax.swing.JMenu();
        menuItemMoveFront = new javax.swing.JMenuItem();
        menuItemForwards = new javax.swing.JMenuItem();
        menuMoveBack = new javax.swing.JMenu();
        menuItemMoveBack = new javax.swing.JMenuItem();
        menuItemBackwards = new javax.swing.JMenuItem();
        sepShapeOptions3 = new javax.swing.JPopupMenu.Separator();
        menuItemRemove = new javax.swing.JMenuItem();
        popupMenuLineSheet = new javax.swing.JPopupMenu();
        menuItemLineSheetColor = new ColoredJMenuItem();
        jSeparator13 = new javax.swing.JPopupMenu.Separator();
        radioItemLineSheetTiny = new javax.swing.JRadioButtonMenuItem();
        radioItemLineSheetSmall = new javax.swing.JRadioButtonMenuItem();
        radioItemLineSheetMedium = new javax.swing.JRadioButtonMenuItem();
        radioItemLineSheetBig = new javax.swing.JRadioButtonMenuItem();
        popupMenuGrid = new javax.swing.JPopupMenu();
        menuItemGridColor = new ColoredJMenuItem();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        radioItemGridTiny = new javax.swing.JRadioButtonMenuItem();
        radioItemGridSmall = new javax.swing.JRadioButtonMenuItem();
        radioItemGridMedium = new javax.swing.JRadioButtonMenuItem();
        radioItemGridBig = new javax.swing.JRadioButtonMenuItem();
        drawPanel = new br.com.davidbuzatto.computersupportedclasshelper.gui.DrawPanel();
        mainToolBar = new ToolBar( ToolBar.Side.LEFT );
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        btnNew = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        btnPrintScreen = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        btnPreview = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnPencil = new javax.swing.JToggleButton();
        btnBrush = new javax.swing.JToggleButton();
        btnEraser = new javax.swing.JToggleButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        btnLine = new javax.swing.JToggleButton();
        btnRectangle = new javax.swing.JToggleButton();
        btnRoundRectangle = new javax.swing.JToggleButton();
        btnEllipse = new javax.swing.JToggleButton();
        btnPolygon = new javax.swing.JToggleButton();
        btnStar = new javax.swing.JToggleButton();
        btnAddImage = new javax.swing.JToggleButton();
        btnAddText = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnMove = new javax.swing.JToggleButton();
        btnFill = new javax.swing.JToggleButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        btnClearCurrentDrawPage = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        colorPanelStroke = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        colorPanelFill = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        jSeparator5 = new javax.swing.JToolBar.Separator();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        btnDrawLineSheet = new javax.swing.JToggleButton();
        btnDrawGrid = new javax.swing.JToggleButton();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        jSeparator12 = new javax.swing.JToolBar.Separator();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        colorPanelBackground = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        jSeparator6 = new javax.swing.JToolBar.Separator();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 20), new java.awt.Dimension(5, 20), new java.awt.Dimension(5, 20));
        jSeparator7 = new javax.swing.JToolBar.Separator();
        btnHelpAndAcount = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        paletteToolBar = new ToolBar( ToolBar.Side.RIGHT );
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5), new java.awt.Dimension(5, 5));
        btnPalette = new javax.swing.JButton();
        panelC1 = new javax.swing.JPanel();
        colorPanelSC1 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC1 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC2 = new javax.swing.JPanel();
        colorPanelSC2 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC2 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC3 = new javax.swing.JPanel();
        colorPanelSC3 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC3 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC4 = new javax.swing.JPanel();
        colorPanelSC4 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC4 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC5 = new javax.swing.JPanel();
        colorPanelSC5 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC5 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC6 = new javax.swing.JPanel();
        colorPanelSC6 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC6 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC7 = new javax.swing.JPanel();
        colorPanelSC7 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC7 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        panelC8 = new javax.swing.JPanel();
        colorPanelSC8 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        colorPanelFC8 = new br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel();
        statusToolBar = new ToolBar( ToolBar.Side.TOP );
        lblPages = new javax.swing.JLabel();

        menuItemNoColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/delete.png"))); // NOI18N
        menuItemNoColor.setText("no color");
        menuItemNoColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNoColorActionPerformed(evt);
            }
        });
        popupMenuNoColor.add(menuItemNoColor);

        popupMenuShapeOptions.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                popupMenuShapeOptionsPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        menuItemEditText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/textfield_rename.png"))); // NOI18N
        menuItemEditText.setText("edit");
        menuItemEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEditTextActionPerformed(evt);
            }
        });
        popupMenuShapeOptions.add(menuItemEditText);
        popupMenuShapeOptions.add(sepShapeOptions1);

        menuItemDuplicate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/arrow_divide.png"))); // NOI18N
        menuItemDuplicate.setText("duplicate");
        menuItemDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDuplicateActionPerformed(evt);
            }
        });
        popupMenuShapeOptions.add(menuItemDuplicate);
        popupMenuShapeOptions.add(sepShapeOptions2);

        menuMoveFront.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_front.png"))); // NOI18N
        menuMoveFront.setText("move front");

        menuItemMoveFront.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_front.png"))); // NOI18N
        menuItemMoveFront.setText("move front");
        menuItemMoveFront.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMoveFrontActionPerformed(evt);
            }
        });
        menuMoveFront.add(menuItemMoveFront);

        menuItemForwards.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_forwards.png"))); // NOI18N
        menuItemForwards.setText("forwards");
        menuItemForwards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemForwardsActionPerformed(evt);
            }
        });
        menuMoveFront.add(menuItemForwards);

        popupMenuShapeOptions.add(menuMoveFront);

        menuMoveBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_back.png"))); // NOI18N
        menuMoveBack.setText("move back");

        menuItemMoveBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_back.png"))); // NOI18N
        menuItemMoveBack.setText("move back");
        menuItemMoveBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMoveBackActionPerformed(evt);
            }
        });
        menuMoveBack.add(menuItemMoveBack);

        menuItemBackwards.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/shape_move_backwards.png"))); // NOI18N
        menuItemBackwards.setText("backwards");
        menuItemBackwards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBackwardsActionPerformed(evt);
            }
        });
        menuMoveBack.add(menuItemBackwards);

        popupMenuShapeOptions.add(menuMoveBack);
        popupMenuShapeOptions.add(sepShapeOptions3);

        menuItemRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/delete.png"))); // NOI18N
        menuItemRemove.setText("remove");
        menuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRemoveActionPerformed(evt);
            }
        });
        popupMenuShapeOptions.add(menuItemRemove);

        menuItemLineSheetColor.setText("color");
        menuItemLineSheetColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLineSheetColorActionPerformed(evt);
            }
        });
        popupMenuLineSheet.add(menuItemLineSheetColor);
        popupMenuLineSheet.add(jSeparator13);

        buttonGroupLineSheetConfig.add(radioItemLineSheetTiny);
        radioItemLineSheetTiny.setText("tiny");
        radioItemLineSheetTiny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemLineSheetTinyActionPerformed(evt);
            }
        });
        popupMenuLineSheet.add(radioItemLineSheetTiny);

        buttonGroupLineSheetConfig.add(radioItemLineSheetSmall);
        radioItemLineSheetSmall.setText("small");
        radioItemLineSheetSmall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemLineSheetSmallActionPerformed(evt);
            }
        });
        popupMenuLineSheet.add(radioItemLineSheetSmall);

        buttonGroupLineSheetConfig.add(radioItemLineSheetMedium);
        radioItemLineSheetMedium.setText("medium");
        radioItemLineSheetMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemLineSheetMediumActionPerformed(evt);
            }
        });
        popupMenuLineSheet.add(radioItemLineSheetMedium);

        buttonGroupLineSheetConfig.add(radioItemLineSheetBig);
        radioItemLineSheetBig.setText("big");
        radioItemLineSheetBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemLineSheetBigActionPerformed(evt);
            }
        });
        popupMenuLineSheet.add(radioItemLineSheetBig);

        menuItemGridColor.setText("color");
        menuItemGridColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGridColorActionPerformed(evt);
            }
        });
        popupMenuGrid.add(menuItemGridColor);
        popupMenuGrid.add(jSeparator14);

        buttonGroupGridConfig.add(radioItemGridTiny);
        radioItemGridTiny.setText("tiny");
        radioItemGridTiny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemGridTinyActionPerformed(evt);
            }
        });
        popupMenuGrid.add(radioItemGridTiny);

        buttonGroupGridConfig.add(radioItemGridSmall);
        radioItemGridSmall.setText("small");
        radioItemGridSmall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemGridSmallActionPerformed(evt);
            }
        });
        popupMenuGrid.add(radioItemGridSmall);

        buttonGroupGridConfig.add(radioItemGridMedium);
        radioItemGridMedium.setText("medium");
        radioItemGridMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemGridMediumActionPerformed(evt);
            }
        });
        popupMenuGrid.add(radioItemGridMedium);

        buttonGroupGridConfig.add(radioItemGridBig);
        radioItemGridBig.setText("big");
        radioItemGridBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioItemGridBigActionPerformed(evt);
            }
        });
        popupMenuGrid.add(radioItemGridBig);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CSCH");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(Toolkit.getDefaultToolkit().getImage( getClass().getResource(
            "/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/palette.png" ) ));
setUndecorated(true);
addWindowListener(new java.awt.event.WindowAdapter() {
    public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
    }
    });

    drawPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
        public void mouseDragged(java.awt.event.MouseEvent evt) {
            drawPanelMouseDragged(evt);
        }
    });
    drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            drawPanelMousePressed(evt);
        }
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            drawPanelMouseReleased(evt);
        }
    });

    mainToolBar.setFloatable(false);
    mainToolBar.setOrientation(javax.swing.SwingConstants.VERTICAL);
    mainToolBar.setRollover(true);
    mainToolBar.setBorderPainted(false);
    mainToolBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    mainToolBar.setOpaque(false);
    mainToolBar.add(filler1);

    btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/folder_add.png"))); // NOI18N
    btnNew.setToolTipText("new (Ctrl+N)");
    btnNew.setFocusPainted(false);
    btnNew.setFocusable(false);
    btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnNew.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnNewActionPerformed(evt);
        }
    });
    mainToolBar.add(btnNew);

    btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/folder_edit.png"))); // NOI18N
    btnOpen.setToolTipText("open (Ctrl+O)");
    btnOpen.setFocusPainted(false);
    btnOpen.setFocusable(false);
    btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnOpen.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOpenActionPerformed(evt);
        }
    });
    mainToolBar.add(btnOpen);

    btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/disk.png"))); // NOI18N
    btnSave.setToolTipText("save (Ctrl+S)");
    btnSave.setFocusPainted(false);
    btnSave.setFocusable(false);
    btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnSave.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSaveActionPerformed(evt);
        }
    });
    mainToolBar.add(btnSave);
    mainToolBar.add(jSeparator9);

    btnPrintScreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/picture.png"))); // NOI18N
    btnPrintScreen.setToolTipText("print screen (PrtScn)");
    btnPrintScreen.setFocusPainted(false);
    btnPrintScreen.setFocusable(false);
    btnPrintScreen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPrintScreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPrintScreen.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPrintScreenActionPerformed(evt);
        }
    });
    mainToolBar.add(btnPrintScreen);
    mainToolBar.add(jSeparator1);

    btnUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/arrow_undo.png"))); // NOI18N
    btnUndo.setToolTipText("undo (Ctrl+Z)");
    btnUndo.setEnabled(false);
    btnUndo.setFocusPainted(false);
    btnUndo.setFocusable(false);
    btnUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnUndo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUndoActionPerformed(evt);
        }
    });
    mainToolBar.add(btnUndo);

    btnRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/arrow_redo.png"))); // NOI18N
    btnRedo.setToolTipText("redo (Ctrl+Y)");
    btnRedo.setEnabled(false);
    btnRedo.setFocusPainted(false);
    btnRedo.setFocusable(false);
    btnRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnRedo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRedoActionPerformed(evt);
        }
    });
    mainToolBar.add(btnRedo);
    mainToolBar.add(jSeparator11);

    btnPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/layers.png"))); // NOI18N
    btnPreview.setToolTipText("preview draw pages (Home)");
    btnPreview.setFocusPainted(false);
    btnPreview.setFocusable(false);
    btnPreview.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPreview.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPreview.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPreviewActionPerformed(evt);
        }
    });
    mainToolBar.add(btnPreview);
    mainToolBar.add(jSeparator2);

    buttonGroup.add(btnPencil);
    btnPencil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/pencil.png"))); // NOI18N
    btnPencil.setSelected(true);
    btnPencil.setToolTipText("pencil (P)");
    btnPencil.setFocusPainted(false);
    btnPencil.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPencil.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnPencilMouseReleased(evt);
        }
    });
    btnPencil.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPencilActionPerformed(evt);
        }
    });
    mainToolBar.add(btnPencil);

    buttonGroup.add(btnBrush);
    btnBrush.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/paintbrush.png"))); // NOI18N
    btnBrush.setToolTipText("brush (B)");
    btnBrush.setFocusPainted(false);
    btnBrush.setFocusable(false);
    btnBrush.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnBrush.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnBrush.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnBrushMouseReleased(evt);
        }
    });
    btnBrush.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBrushActionPerformed(evt);
        }
    });
    mainToolBar.add(btnBrush);

    buttonGroup.add(btnEraser);
    btnEraser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/eraser.png"))); // NOI18N
    btnEraser.setToolTipText("eraser (E)");
    btnEraser.setFocusPainted(false);
    btnEraser.setFocusable(false);
    btnEraser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnEraser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnEraser.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnEraserMouseReleased(evt);
        }
    });
    btnEraser.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEraserActionPerformed(evt);
        }
    });
    mainToolBar.add(btnEraser);
    mainToolBar.add(jSeparator10);

    buttonGroup.add(btnLine);
    btnLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/line.png"))); // NOI18N
    btnLine.setToolTipText("line (L)");
    btnLine.setFocusPainted(false);
    btnLine.setFocusable(false);
    btnLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnLine.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnLineMouseReleased(evt);
        }
    });
    btnLine.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLineActionPerformed(evt);
        }
    });
    mainToolBar.add(btnLine);

    buttonGroup.add(btnRectangle);
    btnRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/retangle.png"))); // NOI18N
    btnRectangle.setToolTipText("rectangle (R)");
    btnRectangle.setFocusPainted(false);
    btnRectangle.setFocusable(false);
    btnRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnRectangle.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnRectangleMouseReleased(evt);
        }
    });
    btnRectangle.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRectangleActionPerformed(evt);
        }
    });
    mainToolBar.add(btnRectangle);

    buttonGroup.add(btnRoundRectangle);
    btnRoundRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/roundRectangle.png"))); // NOI18N
    btnRoundRectangle.setToolTipText("round rectangle (A)");
    btnRoundRectangle.setFocusPainted(false);
    btnRoundRectangle.setFocusable(false);
    btnRoundRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnRoundRectangle.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnRoundRectangleMouseReleased(evt);
        }
    });
    btnRoundRectangle.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRoundRectangleActionPerformed(evt);
        }
    });
    mainToolBar.add(btnRoundRectangle);

    buttonGroup.add(btnEllipse);
    btnEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/ellipse.png"))); // NOI18N
    btnEllipse.setToolTipText("ellipse (S)");
    btnEllipse.setFocusPainted(false);
    btnEllipse.setFocusable(false);
    btnEllipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnEllipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnEllipse.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnEllipseMouseReleased(evt);
        }
    });
    btnEllipse.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEllipseActionPerformed(evt);
        }
    });
    mainToolBar.add(btnEllipse);

    buttonGroup.add(btnPolygon);
    btnPolygon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/polygon.png"))); // NOI18N
    btnPolygon.setToolTipText("polygon (G)");
    btnPolygon.setFocusPainted(false);
    btnPolygon.setFocusable(false);
    btnPolygon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPolygon.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnPolygonMouseReleased(evt);
        }
    });
    btnPolygon.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPolygonActionPerformed(evt);
        }
    });
    mainToolBar.add(btnPolygon);

    buttonGroup.add(btnStar);
    btnStar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/star.png"))); // NOI18N
    btnStar.setToolTipText("star (T)");
    btnStar.setFocusPainted(false);
    btnStar.setFocusable(false);
    btnStar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnStar.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnStarMouseReleased(evt);
        }
    });
    btnStar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnStarActionPerformed(evt);
        }
    });
    mainToolBar.add(btnStar);

    buttonGroup.add(btnAddImage);
    btnAddImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/picture_add.png"))); // NOI18N
    btnAddImage.setToolTipText("add image (I)");
    btnAddImage.setFocusPainted(false);
    btnAddImage.setFocusable(false);
    btnAddImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnAddImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnAddImage.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddImageActionPerformed(evt);
        }
    });
    mainToolBar.add(btnAddImage);

    buttonGroup.add(btnAddText);
    btnAddText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/font_add.png"))); // NOI18N
    btnAddText.setToolTipText("text (X)");
    btnAddText.setFocusPainted(false);
    btnAddText.setFocusable(false);
    btnAddText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnAddText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnAddText.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnAddTextMouseReleased(evt);
        }
    });
    btnAddText.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddTextActionPerformed(evt);
        }
    });
    mainToolBar.add(btnAddText);
    mainToolBar.add(jSeparator3);

    buttonGroup.add(btnMove);
    btnMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/cursor_openhand.png"))); // NOI18N
    btnMove.setToolTipText("move (M)");
    btnMove.setFocusPainted(false);
    btnMove.setFocusable(false);
    btnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnMove.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMoveActionPerformed(evt);
        }
    });
    mainToolBar.add(btnMove);

    buttonGroup.add(btnFill);
    btnFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/paintcan.png"))); // NOI18N
    btnFill.setToolTipText("change fill (F)");
    btnFill.setFocusPainted(false);
    btnFill.setFocusable(false);
    btnFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnFill.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFillActionPerformed(evt);
        }
    });
    mainToolBar.add(btnFill);
    mainToolBar.add(jSeparator8);

    btnClearCurrentDrawPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/delete.png"))); // NOI18N
    btnClearCurrentDrawPage.setToolTipText("clear current draw page (Ctrl+Backspace)");
    btnClearCurrentDrawPage.setFocusPainted(false);
    btnClearCurrentDrawPage.setFocusable(false);
    btnClearCurrentDrawPage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnClearCurrentDrawPage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnClearCurrentDrawPage.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClearCurrentDrawPageActionPerformed(evt);
        }
    });
    mainToolBar.add(btnClearCurrentDrawPage);
    mainToolBar.add(jSeparator4);
    mainToolBar.add(filler2);

    colorPanelStroke.setToolTipText("stroke color (Shift+S)");
    colorPanelStroke.setAlignmentX(0.0F);
    colorPanelStroke.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelStrokeMousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelStrokeLayout = new javax.swing.GroupLayout(colorPanelStroke);
    colorPanelStroke.setLayout(colorPanelStrokeLayout);
    colorPanelStrokeLayout.setHorizontalGroup(
        colorPanelStrokeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelStrokeLayout.setVerticalGroup(
        colorPanelStrokeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    mainToolBar.add(colorPanelStroke);
    mainToolBar.add(filler3);

    colorPanelFill.setToolTipText("fill color (Shift+F)");
    colorPanelFill.setAlignmentX(0.0F);
    colorPanelFill.setColor(null);
    colorPanelFill.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFillMousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFillLayout = new javax.swing.GroupLayout(colorPanelFill);
    colorPanelFill.setLayout(colorPanelFillLayout);
    colorPanelFillLayout.setHorizontalGroup(
        colorPanelFillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFillLayout.setVerticalGroup(
        colorPanelFillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    mainToolBar.add(colorPanelFill);
    mainToolBar.add(filler4);
    mainToolBar.add(jSeparator5);
    mainToolBar.add(filler6);

    btnDrawLineSheet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/page_white_text.png"))); // NOI18N
    btnDrawLineSheet.setToolTipText("draw line sheet (H)");
    btnDrawLineSheet.setFocusPainted(false);
    btnDrawLineSheet.setFocusable(false);
    btnDrawLineSheet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDrawLineSheet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDrawLineSheet.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnDrawLineSheetMouseReleased(evt);
        }
    });
    btnDrawLineSheet.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDrawLineSheetActionPerformed(evt);
        }
    });
    mainToolBar.add(btnDrawLineSheet);

    btnDrawGrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/page_white_grid.png"))); // NOI18N
    btnDrawGrid.setToolTipText("draw grid (D)");
    btnDrawGrid.setFocusPainted(false);
    btnDrawGrid.setFocusable(false);
    btnDrawGrid.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnDrawGrid.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnDrawGrid.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            btnDrawGridMouseReleased(evt);
        }
    });
    btnDrawGrid.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDrawGridActionPerformed(evt);
        }
    });
    mainToolBar.add(btnDrawGrid);
    mainToolBar.add(filler10);
    mainToolBar.add(jSeparator12);
    mainToolBar.add(filler9);

    colorPanelBackground.setToolTipText("background color (Shift+B)");
    colorPanelBackground.setAlignmentX(0.0F);
    colorPanelBackground.setColor(null);
    colorPanelBackground.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelBackgroundMousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelBackgroundLayout = new javax.swing.GroupLayout(colorPanelBackground);
    colorPanelBackground.setLayout(colorPanelBackgroundLayout);
    colorPanelBackgroundLayout.setHorizontalGroup(
        colorPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelBackgroundLayout.setVerticalGroup(
        colorPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    mainToolBar.add(colorPanelBackground);
    mainToolBar.add(filler7);
    mainToolBar.add(jSeparator6);
    mainToolBar.add(filler5);
    mainToolBar.add(jSeparator7);

    btnHelpAndAcount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/help.png"))); // NOI18N
    btnHelpAndAcount.setToolTipText("help and about (F1)");
    btnHelpAndAcount.setFocusPainted(false);
    btnHelpAndAcount.setFocusable(false);
    btnHelpAndAcount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnHelpAndAcount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnHelpAndAcount.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnHelpAndAcountActionPerformed(evt);
        }
    });
    mainToolBar.add(btnHelpAndAcount);

    btnQuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/cancel.png"))); // NOI18N
    btnQuit.setToolTipText("quit (Alt+F4)");
    btnQuit.setFocusPainted(false);
    btnQuit.setFocusable(false);
    btnQuit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnQuit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnQuit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitActionPerformed(evt);
        }
    });
    mainToolBar.add(btnQuit);

    paletteToolBar.setFloatable(false);
    paletteToolBar.setOrientation(javax.swing.SwingConstants.VERTICAL);
    paletteToolBar.setRollover(true);
    paletteToolBar.setAlignmentX(0.15151516F);
    paletteToolBar.setBorderPainted(false);
    paletteToolBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    paletteToolBar.setOpaque(false);
    paletteToolBar.add(filler8);

    btnPalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/computersupportedclasshelper/gui/icons/palette.png"))); // NOI18N
    btnPalette.setToolTipText("palettes (C)");
    btnPalette.setFocusPainted(false);
    btnPalette.setFocusable(false);
    btnPalette.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPalette.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPalette.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPaletteActionPerformed(evt);
        }
    });
    paletteToolBar.add(btnPalette);

    panelC1.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC1.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC1.setName(""); // NOI18N
    panelC1.setOpaque(false);
    panelC1.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC1.setToolTipText("stroke color 1 (Shift+1)");
    colorPanelSC1.setAlignmentX(0.0F);
    colorPanelSC1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC1MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC1Layout = new javax.swing.GroupLayout(colorPanelSC1);
    colorPanelSC1.setLayout(colorPanelSC1Layout);
    colorPanelSC1Layout.setHorizontalGroup(
        colorPanelSC1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC1Layout.setVerticalGroup(
        colorPanelSC1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC1.add(colorPanelSC1);

    colorPanelFC1.setToolTipText("fill color 1 (Ctrl+1)");
    colorPanelFC1.setAlignmentX(0.0F);
    colorPanelFC1.setColor(null);
    colorPanelFC1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC1MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC1Layout = new javax.swing.GroupLayout(colorPanelFC1);
    colorPanelFC1.setLayout(colorPanelFC1Layout);
    colorPanelFC1Layout.setHorizontalGroup(
        colorPanelFC1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC1Layout.setVerticalGroup(
        colorPanelFC1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC1.add(colorPanelFC1);

    paletteToolBar.add(panelC1);

    panelC2.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC2.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC2.setName(""); // NOI18N
    panelC2.setOpaque(false);
    panelC2.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC2.setToolTipText("stroke color 2 (Shift+2)");
    colorPanelSC2.setAlignmentX(0.0F);
    colorPanelSC2.setColor(new java.awt.Color(255, 255, 255));
    colorPanelSC2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC2MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC2Layout = new javax.swing.GroupLayout(colorPanelSC2);
    colorPanelSC2.setLayout(colorPanelSC2Layout);
    colorPanelSC2Layout.setHorizontalGroup(
        colorPanelSC2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC2Layout.setVerticalGroup(
        colorPanelSC2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC2.add(colorPanelSC2);

    colorPanelFC2.setToolTipText("fill color 2 (Ctrl+2)");
    colorPanelFC2.setAlignmentX(0.0F);
    colorPanelFC2.setColor(null);
    colorPanelFC2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC2MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC2Layout = new javax.swing.GroupLayout(colorPanelFC2);
    colorPanelFC2.setLayout(colorPanelFC2Layout);
    colorPanelFC2Layout.setHorizontalGroup(
        colorPanelFC2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC2Layout.setVerticalGroup(
        colorPanelFC2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC2.add(colorPanelFC2);

    paletteToolBar.add(panelC2);

    panelC3.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC3.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC3.setName(""); // NOI18N
    panelC3.setOpaque(false);
    panelC3.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC3.setToolTipText("stroke color 3 (Shift+3)");
    colorPanelSC3.setAlignmentX(0.0F);
    colorPanelSC3.setColor(new java.awt.Color(0, 153, 255));
    colorPanelSC3.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC3MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC3Layout = new javax.swing.GroupLayout(colorPanelSC3);
    colorPanelSC3.setLayout(colorPanelSC3Layout);
    colorPanelSC3Layout.setHorizontalGroup(
        colorPanelSC3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC3Layout.setVerticalGroup(
        colorPanelSC3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC3.add(colorPanelSC3);

    colorPanelFC3.setToolTipText("fill color 3 (Ctrl+3)");
    colorPanelFC3.setAlignmentX(0.0F);
    colorPanelFC3.setColor(null);
    colorPanelFC3.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC3MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC3Layout = new javax.swing.GroupLayout(colorPanelFC3);
    colorPanelFC3.setLayout(colorPanelFC3Layout);
    colorPanelFC3Layout.setHorizontalGroup(
        colorPanelFC3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC3Layout.setVerticalGroup(
        colorPanelFC3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC3.add(colorPanelFC3);

    paletteToolBar.add(panelC3);

    panelC4.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC4.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC4.setName(""); // NOI18N
    panelC4.setOpaque(false);
    panelC4.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC4.setToolTipText("stroke color 4 (Shift+4)");
    colorPanelSC4.setAlignmentX(0.0F);
    colorPanelSC4.setColor(new java.awt.Color(0, 204, 51));
    colorPanelSC4.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC4MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC4Layout = new javax.swing.GroupLayout(colorPanelSC4);
    colorPanelSC4.setLayout(colorPanelSC4Layout);
    colorPanelSC4Layout.setHorizontalGroup(
        colorPanelSC4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC4Layout.setVerticalGroup(
        colorPanelSC4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC4.add(colorPanelSC4);

    colorPanelFC4.setToolTipText("fill color 4 (Ctrl+4)");
    colorPanelFC4.setAlignmentX(0.0F);
    colorPanelFC4.setColor(null);
    colorPanelFC4.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC4MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC4Layout = new javax.swing.GroupLayout(colorPanelFC4);
    colorPanelFC4.setLayout(colorPanelFC4Layout);
    colorPanelFC4Layout.setHorizontalGroup(
        colorPanelFC4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC4Layout.setVerticalGroup(
        colorPanelFC4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC4.add(colorPanelFC4);

    paletteToolBar.add(panelC4);

    panelC5.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC5.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC5.setName(""); // NOI18N
    panelC5.setOpaque(false);
    panelC5.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC5.setToolTipText("stroke color 5 (Shift+5)");
    colorPanelSC5.setAlignmentX(0.0F);
    colorPanelSC5.setColor(new java.awt.Color(255, 102, 0));
    colorPanelSC5.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC5MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC5Layout = new javax.swing.GroupLayout(colorPanelSC5);
    colorPanelSC5.setLayout(colorPanelSC5Layout);
    colorPanelSC5Layout.setHorizontalGroup(
        colorPanelSC5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC5Layout.setVerticalGroup(
        colorPanelSC5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC5.add(colorPanelSC5);

    colorPanelFC5.setToolTipText("fill color 5 (Ctrl+5)");
    colorPanelFC5.setAlignmentX(0.0F);
    colorPanelFC5.setColor(null);
    colorPanelFC5.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC5MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC5Layout = new javax.swing.GroupLayout(colorPanelFC5);
    colorPanelFC5.setLayout(colorPanelFC5Layout);
    colorPanelFC5Layout.setHorizontalGroup(
        colorPanelFC5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC5Layout.setVerticalGroup(
        colorPanelFC5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC5.add(colorPanelFC5);

    paletteToolBar.add(panelC5);

    panelC6.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC6.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC6.setName(""); // NOI18N
    panelC6.setOpaque(false);
    panelC6.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC6.setToolTipText("stroke color 6 (Shift+6)");
    colorPanelSC6.setAlignmentX(0.0F);
    colorPanelSC6.setColor(new java.awt.Color(255, 0, 51));
    colorPanelSC6.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC6MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC6Layout = new javax.swing.GroupLayout(colorPanelSC6);
    colorPanelSC6.setLayout(colorPanelSC6Layout);
    colorPanelSC6Layout.setHorizontalGroup(
        colorPanelSC6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC6Layout.setVerticalGroup(
        colorPanelSC6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC6.add(colorPanelSC6);

    colorPanelFC6.setToolTipText("fill color 6 (Ctrl+6)");
    colorPanelFC6.setAlignmentX(0.0F);
    colorPanelFC6.setColor(null);
    colorPanelFC6.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC6MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC6Layout = new javax.swing.GroupLayout(colorPanelFC6);
    colorPanelFC6.setLayout(colorPanelFC6Layout);
    colorPanelFC6Layout.setHorizontalGroup(
        colorPanelFC6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC6Layout.setVerticalGroup(
        colorPanelFC6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC6.add(colorPanelFC6);

    paletteToolBar.add(panelC6);

    panelC7.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC7.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC7.setName(""); // NOI18N
    panelC7.setOpaque(false);
    panelC7.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC7.setToolTipText("stroke color 7 (Shift+7)");
    colorPanelSC7.setAlignmentX(0.0F);
    colorPanelSC7.setColor(new java.awt.Color(255, 0, 204));
    colorPanelSC7.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC7MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC7Layout = new javax.swing.GroupLayout(colorPanelSC7);
    colorPanelSC7.setLayout(colorPanelSC7Layout);
    colorPanelSC7Layout.setHorizontalGroup(
        colorPanelSC7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC7Layout.setVerticalGroup(
        colorPanelSC7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC7.add(colorPanelSC7);

    colorPanelFC7.setToolTipText("fill color 7 (Ctrl+7)");
    colorPanelFC7.setAlignmentX(0.0F);
    colorPanelFC7.setColor(null);
    colorPanelFC7.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC7MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC7Layout = new javax.swing.GroupLayout(colorPanelFC7);
    colorPanelFC7.setLayout(colorPanelFC7Layout);
    colorPanelFC7Layout.setHorizontalGroup(
        colorPanelFC7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC7Layout.setVerticalGroup(
        colorPanelFC7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC7.add(colorPanelFC7);

    paletteToolBar.add(panelC7);

    panelC8.setMaximumSize(new java.awt.Dimension(60, 30));
    panelC8.setMinimumSize(new java.awt.Dimension(60, 30));
    panelC8.setName(""); // NOI18N
    panelC8.setOpaque(false);
    panelC8.setPreferredSize(new java.awt.Dimension(60, 30));

    colorPanelSC8.setToolTipText("stroke color 8 (Shift+8)");
    colorPanelSC8.setAlignmentX(0.0F);
    colorPanelSC8.setColor(new java.awt.Color(102, 0, 204));
    colorPanelSC8.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelSC8MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelSC8Layout = new javax.swing.GroupLayout(colorPanelSC8);
    colorPanelSC8.setLayout(colorPanelSC8Layout);
    colorPanelSC8Layout.setHorizontalGroup(
        colorPanelSC8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelSC8Layout.setVerticalGroup(
        colorPanelSC8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC8.add(colorPanelSC8);

    colorPanelFC8.setToolTipText("fill color 8 (Ctrl+8)");
    colorPanelFC8.setAlignmentX(0.0F);
    colorPanelFC8.setColor(null);
    colorPanelFC8.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mousePressed(java.awt.event.MouseEvent evt) {
            colorPanelFC8MousePressed(evt);
        }
    });

    javax.swing.GroupLayout colorPanelFC8Layout = new javax.swing.GroupLayout(colorPanelFC8);
    colorPanelFC8.setLayout(colorPanelFC8Layout);
    colorPanelFC8Layout.setHorizontalGroup(
        colorPanelFC8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );
    colorPanelFC8Layout.setVerticalGroup(
        colorPanelFC8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 20, Short.MAX_VALUE)
    );

    panelC8.add(colorPanelFC8);

    paletteToolBar.add(panelC8);

    statusToolBar.setFloatable(false);
    statusToolBar.setBorderPainted(false);
    statusToolBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    statusToolBar.setFocusable(false);
    statusToolBar.setOpaque(false);
    statusToolBar.setRequestFocusEnabled(false);
    statusToolBar.setVerifyInputWhenFocusTarget(false);

    lblPages.setFont(new Font( "Dialog", Font.BOLD, 12 ));
    lblPages.setForeground(new java.awt.Color(188, 188, 188));
    lblPages.setText("pages");
    lblPages.setToolTipText("current draw page / total draw pages");
    statusToolBar.add(lblPages);

    javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
    drawPanel.setLayout(drawPanelLayout);
    drawPanelLayout.setHorizontalGroup(
        drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(drawPanelLayout.createSequentialGroup()
            .addComponent(mainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1095, Short.MAX_VALUE)
            .addComponent(statusToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(paletteToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    drawPanelLayout.setVerticalGroup(
        drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(paletteToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(drawPanelLayout.createSequentialGroup()
            .addComponent(statusToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void drawPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMousePressed
        
        xPressed = evt.getX();
        yPressed = evt.getY();
            
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            lookForSelectedShape();
            
            if ( btnMove.isSelected() ) {

                if ( selectedShape != null ) {
                    
                    if ( movingSca == null ) {
                        movingSca = new ShapeChangeAction( selectedShape );
                        movingSca.inspectShapeBeforeChange( selectedShape );
                    }
                    
                    selectedShape.setSelected( true );
                    createSelectedRepaintRunnable();
                    
                }
                
                xPrev = xPressed;
                yPrev = yPressed;

            } else if ( btnFill.isSelected() ) {

                if ( selectedShape != null ) {
                    
                    ShapeChangeAction sca = new ShapeChangeAction( selectedShape );
                    sca.inspectShapeBeforeChange( selectedShape );
                    
                    selectedShape.setStrokeColor( colorPanelStroke.getColor() );
                    selectedShape.setFillColor( colorPanelFill.getColor() );
                    selectedShape.setStrokeWidth( dConfig.getStrokeWidth() );
                    
                    if ( selectedShape instanceof Text ) {
                        Text text = (Text) selectedShape;
                        text.setFontType( dConfig.getFontType() );
                        text.setFontSize( dConfig.getFontSize() );
                        text.setFontIsBold( dConfig.isFontIsBold() );
                        text.setFontIsItalic( dConfig.isFontIsItalic() );
                        text.setFontAlignment( dConfig.getFontAlignment() );
                    }
                    
                    sca.inspectShapeAfterChange( selectedShape );
                    drawPanel.addChangeAction( sca );
                    
                }

            } else if ( btnAddImage.isSelected() ) {
                
                try {
                    
                    JFileChooser jfc = new JFileChooser();
                    jfc.setCurrentDirectory( dConfig.getDefaultDir() );
                    jfc.setDialogTitle( "Select Image" );
                    jfc.setMultiSelectionEnabled( false );
                    jfc.setFileFilter( new FileNameExtensionFilter( 
                            "Supported Image Formats", "jpg", "jpeg", "png", "gif", "bmp" ) );

                    if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {

                        File f = jfc.getSelectedFile();
                        BufferedImage bi = ImageIO.read( f );
                        
                        Image img = new Image();
                        img.setImage( bi );
                        img.setFormat( f.getName().substring( f.getName().lastIndexOf( "." ) + 1 ) );
                        img.setXStart( xPressed );
                        img.setYStart( yPressed );
                        img.setXEnd( xPressed + bi.getWidth() );
                        img.setYEnd( yPressed + bi.getHeight() );
                        
                        drawPanel.addShape( img );
                        
                        AddShapeChangeAction aca = new AddShapeChangeAction( img, drawPanel.getCurrentDrawPage() );
                        drawPanel.addChangeAction( aca );

                    }

                } catch ( IOException exc ) {
                    exc.printStackTrace();
                }
                
            } else if ( btnAddText.isSelected() ) {
                
                ToolConfigDialogTextValue tcdt = new ToolConfigDialogTextValue( this, true, "" );
                tcdt.setVisible( true );
                
                String textValue = tcdt.getText();
                
                if ( textValue != null ) {
                    
                    Text text = new Text();
                    
                    text.setStrokeColor( colorPanelStroke.getColor() );
                    text.setFillColor( colorPanelFill.getColor() );
                    
                    text.setText( textValue );
                    text.setFontType( dConfig.getFontType() );
                    text.setFontSize( dConfig.getFontSize() );
                    text.setFontIsBold( dConfig.isFontIsBold() );
                    text.setFontIsItalic( dConfig.isFontIsItalic() );
                    text.setFontAlignment( dConfig.getFontAlignment() );

                    text.setXStart( xPressed );
                    text.setYStart( yPressed );

                    drawPanel.addShape( text );
                    
                    AddShapeChangeAction aca = new AddShapeChangeAction( text, drawPanel.getCurrentDrawPage() );
                    drawPanel.addChangeAction( aca );
                        
                }
                
            } else {

                if ( btnPencil.isSelected() ) {
                    if ( currentShape == null ) {
                        Curve c = new Curve();
                        c.setStrokeColor( colorPanelStroke.getColor() );
                        c.setFillColor( colorPanelFill.getColor() );
                        c.setStrokeWidth( dConfig.getStrokeWidth() );
                        c.addCoordinate( xPressed, yPressed );
                        currentShape = c;
                    }
                } else if ( btnBrush.isSelected() ) {
                    if ( currentShape == null ) {
                        BrushCurve b = new BrushCurve();
                        b.setStrokeColor( colorPanelStroke.getColor() );
                        b.setFillColor( colorPanelFill.getColor() );
                        b.setStrokeWidth( dConfig.getStrokeWidth() );
                        b.addCoordinate( xPressed, yPressed );
                        currentShape = b;
                    }
                } else if ( btnEraser.isSelected() ) {
                    if ( currentShape == null ) {
                        EraserCurve e = new EraserCurve();
                        e.setStrokeColor( colorPanelBackground.getColor() );
                        e.setFillColor( null );
                        e.setStrokeWidth( dConfig.getEraserWidth() );
                        e.addCoordinate( xPressed, yPressed );
                        currentShape = e;
                    }
                }

                drawing = true;

            }

            drawPanel.repaint();
        
        } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            lookForSelectedShape();
            
            if ( selectedShape != null ) {
                
                menuItemEditText.setVisible( false );
                sepShapeOptions1.setVisible( false );
                
                if ( selectedShape instanceof Text ) {
                    menuItemEditText.setVisible( true );
                    sepShapeOptions1.setVisible( true );
                }
                
                popupMenuShapeOptions.show( evt.getComponent(), evt.getX(), evt.getY() );
                selectedShape.setSelected( true );
                createSelectedRepaintRunnable();
                
            }
            
        }
        
    }//GEN-LAST:event_drawPanelMousePressed

    private void lookForSelectedShape() {
        
        // detecting interceptions
        List<Shape> shapes = drawPanel.getShapes();
        ListIterator<Shape> li = shapes.listIterator( shapes.size() );
        
        while ( li.hasPrevious() ) {
            
            Shape shape = li.previous();
            
            if ( shape.intercepts( xPressed, yPressed ) ) {
                selectedShape = shape;
                break;
            }
            
        }
        
    }

    private void drawPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseReleased
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            drawing = false;
            
            if ( selectedShape != null ) {
                
                selectedShape.setSelected( false );
                destroySelectedRepaintRunnable();
                
                if ( btnMove.isSelected() ) {
                    if ( movingSca != null ) {
                        movingSca.inspectShapeAfterChange( selectedShape );
                        drawPanel.addChangeAction( movingSca );
                        movingSca = null;
                    }
                }
                
                selectedShape = null;
                
            }

            if ( currentShape != null ) {
                
                drawPanel.setTempShape( null );
                drawPanel.addShape( currentShape );
                
                AddShapeChangeAction aca = new AddShapeChangeAction( currentShape, drawPanel.getCurrentDrawPage() );
                drawPanel.addChangeAction( aca );
                
                currentShape = null;
                
            }

            drawPanel.repaint();
            verifyHistory();
            
        }
        
    }//GEN-LAST:event_drawPanelMouseReleased

    private void drawPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseDragged
        
        if ( SwingUtilities.isLeftMouseButton( evt ) && drawing ) {
            
            if ( btnPencil.isSelected() ) {

                Curve curve;

                if ( currentShape != null && currentShape instanceof Curve ) {
                    curve = (Curve) currentShape;
                } else {
                    curve = new Curve();
                }

                curve.setStrokeColor( colorPanelStroke.getColor() );
                curve.setFillColor( colorPanelFill.getColor() );

                curve.setStrokeWidth( dConfig.getStrokeWidth() );
                curve.addCoordinate( evt.getX(), evt.getY() );

                currentShape = curve;

            } else if ( btnBrush.isSelected() ) {

                BrushCurve curve;

                if ( currentShape != null && currentShape instanceof BrushCurve ) {
                    curve = (BrushCurve) currentShape;
                } else {
                    curve = new BrushCurve();
                }

                curve.setStrokeColor( colorPanelStroke.getColor() );
                curve.setFillColor( colorPanelFill.getColor() );

                curve.setStrokeWidth( dConfig.getStrokeWidth() );
                curve.addCoordinate( evt.getX(), evt.getY() );

                currentShape = curve;

            } else if ( btnEraser.isSelected() ) {

                EraserCurve curve;

                if ( currentShape != null && currentShape instanceof EraserCurve ) {
                    curve = (EraserCurve) currentShape;
                } else {
                    curve = new EraserCurve();
                }

                curve.setStrokeColor( colorPanelBackground.getColor() );
                curve.setFillColor( null );

                curve.setStrokeWidth( dConfig.getEraserWidth() );
                curve.addCoordinate( evt.getX(), evt.getY() );

                currentShape = curve;

            } else if ( btnLine.isSelected() ) {

                Line line = new Line();

                line.setStrokeColor( colorPanelStroke.getColor() );

                line.setStrokeWidth( dConfig.getStrokeWidth() );
                line.setXStart( xPressed );
                line.setYStart( yPressed );
                
                if ( isShiftDown ) {
                    drawWhenShiftIsDown( evt, line );
                } else {
                    line.setXEnd( evt.getX() );
                    line.setYEnd( evt.getY() );
                }

                currentShape = line;

            } else if ( btnRectangle.isSelected() ) {

                Rectangle rectangle = new Rectangle();

                rectangle.setStrokeColor( colorPanelStroke.getColor() );
                rectangle.setFillColor( colorPanelFill.getColor() );

                rectangle.setStrokeWidth( dConfig.getStrokeWidth() );
                rectangle.setXStart( xPressed );
                rectangle.setYStart( yPressed );
                
                if ( isShiftDown ) {
                    drawWhenShiftIsDown( evt, rectangle );
                } else {
                    rectangle.setXEnd( evt.getX() );
                    rectangle.setYEnd( evt.getY() );
                }

                currentShape = rectangle;

            } else if ( btnRoundRectangle.isSelected() ) {

                RoundRectangle rectangle = new RoundRectangle();

                rectangle.setStrokeColor( colorPanelStroke.getColor() );
                rectangle.setFillColor( colorPanelFill.getColor() );

                rectangle.setStrokeWidth( dConfig.getStrokeWidth() );
                rectangle.setArcRadius( dConfig.getArcRadius() );
                rectangle.setXStart( xPressed );
                rectangle.setYStart( yPressed );
                
                if ( isShiftDown ) {
                    drawWhenShiftIsDown( evt, rectangle );
                } else {
                    rectangle.setXEnd( evt.getX() );
                    rectangle.setYEnd( evt.getY() );
                }

                currentShape = rectangle;

            } else if ( btnEllipse.isSelected() ) {

                Ellipse ellipse = new Ellipse();

                ellipse.setStrokeColor( colorPanelStroke.getColor() );
                ellipse.setFillColor( colorPanelFill.getColor() );

                ellipse.setStrokeWidth( dConfig.getStrokeWidth() );
                ellipse.setXStart( xPressed );
                ellipse.setYStart( yPressed );
                
                if ( isShiftDown ) {
                    drawWhenShiftIsDown( evt, ellipse );
                } else {
                    ellipse.setXEnd( evt.getX() );
                    ellipse.setYEnd( evt.getY() );
                }

                currentShape = ellipse;

            } else if ( btnPolygon.isSelected() ) {

                Polygon polygon = new Polygon();

                polygon.setStrokeColor( colorPanelStroke.getColor() );
                polygon.setFillColor( colorPanelFill.getColor() );

                polygon.setStrokeWidth( dConfig.getStrokeWidth() );
                polygon.setSideQuantity( dConfig.getSideQuantity() );

                double c1 = evt.getX() - xPressed;
                double c2 = evt.getY() - yPressed;

                polygon.setRadius( Math.sqrt( c1*c1 + c2*c2 ) );
                polygon.setXCenter( xPressed );
                polygon.setYCenter( yPressed );
                
                polygon.setAngle( Math.toDegrees( Math.atan2( c2, c1 ) ) );

                currentShape = polygon;

            } else if ( btnStar.isSelected() ) {

                Star star = new Star();

                star.setStrokeColor( colorPanelStroke.getColor() );
                star.setFillColor( colorPanelFill.getColor() );

                star.setStrokeWidth( dConfig.getStrokeWidth() );
                star.setSideQuantity( dConfig.getSideQuantity() );

                double c1 = evt.getX() - xPressed;
                double c2 = evt.getY() - yPressed;

                star.setRadius( Math.sqrt( c1*c1 + c2*c2 ) );
                star.setXCenter( xPressed );
                star.setYCenter( yPressed );

                star.setAngle( Math.toDegrees( Math.atan2( c2, c1 ) ) );

                currentShape = star;

            }

            drawPanel.setTempShape( currentShape );
            drawPanel.repaint();

        } else if ( SwingUtilities.isLeftMouseButton( evt ) && 
                    btnMove.isSelected() ) {
            
            if ( selectedShape != null ) {
                selectedShape.move( evt.getX() - xPrev, evt.getY() - yPrev );
            } else {
                for ( Shape s : drawPanel.getShapes() ) {
                    s.move( evt.getX() - xPrev, evt.getY() - yPrev );
                }
            }
            
            xPrev = evt.getX();
            yPrev = evt.getY();
            drawPanel.repaint();
        
        }
        
    }//GEN-LAST:event_drawPanelMouseDragged

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        close();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void close() {
        
        if ( CustomMessageAndConfirmDialog.showConfirmDialog( this,
                "Really quit?", "Quit?" ) == JOptionPane.YES_OPTION ) {
            
            if ( CustomMessageAndConfirmDialog.showConfirmDialog( this,
                "<html>Save your project before quit?</html>", "Save Before Quit?" ) == JOptionPane.YES_OPTION ) {
                saveProject();
            }
            
            dConfig.save();
            System.exit( 0 );
            
        }
        
    }

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        
        if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                this, "<html>All unsaved data will be lost.<br/>Continue?</html>", "New Project" ) == JOptionPane.YES_OPTION ) {
            drawPanel.reset();
            drawPanel.setBackgroundColor( colorPanelBackground.getColor() );
            drawPanel.repaint();
            currentFile = null;
            Shape.setIdCount( 0 );
            updateLabelPages();
            verifyHistory();
        }
        
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        
        dConfig.setProcessEventsMainWindow( false );
        
        try {
            
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory( dConfig.getDefaultDir() );
            jfc.setDialogTitle( "Open Project" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileFilter( new FileNameExtensionFilter( "Computer Supported Class Helper File", "csch" ) );
            
            if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();
                
                if ( currentFile == null || !f.equals( currentFile ) ) {
                    
                    currentFile = f;
                    dConfig.setDefaultDir( currentFile.getParentFile() );
                    
                    ObjectInputStream i = new ObjectInputStream( new FileInputStream( currentFile ) );
                    drawPanel.loadDrawPagesFromOutside( i.readObject() );
                    i.close();
                    
                    drawPanel.repaint();
                    
                    Shape.setIdCount( drawPanel.getMaxShapeId() + 1 );
                    updateLabelPages();
                    verifyHistory();
                    
                    if ( drawPanel.getBackgroundColor().equals( Constants.TRANSPARENT_COLOR ) ) {
                        colorPanelBackground.setColor( null );
                    } else {
                        colorPanelBackground.setColor( drawPanel.getBackgroundColor() );
                    }
                    
                    configureLineSheetAndGridGUI();
                    
                }
                
            }
            
        } catch ( IOException | ClassNotFoundException exc ) {
            exc.printStackTrace();
        }
        
        dConfig.setProcessEventsMainWindow( true );
        
    }//GEN-LAST:event_btnOpenActionPerformed

    private void configureLineSheetAndGridGUI() {
        if ( drawPanel.getCurrentDrawPage().isDrawLineSheet() ) {
            btnDrawLineSheet.setSelected( true );
            btnDrawGrid.setSelected( false );
        } else if ( drawPanel.getCurrentDrawPage().isDrawGrid() ) {
            btnDrawLineSheet.setSelected( false );
            btnDrawGrid.setSelected( true );
        }  else {
            btnDrawLineSheet.setSelected( false );
            btnDrawGrid.setSelected( false );
        }
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveProject( );
    }//GEN-LAST:event_btnSaveActionPerformed

    private void saveProject() throws HeadlessException {
        
        dConfig.setProcessEventsMainWindow( false );
        
        try {
            
            if ( currentFile == null ) {
                
                JFileChooser jfc = new JFileChooser();
                jfc.setCurrentDirectory( dConfig.getDefaultDir() );
                jfc.setDialogTitle( "Save Project" );
                jfc.setMultiSelectionEnabled( false );
                jfc.setFileFilter( new FileNameExtensionFilter( "Computer Supported Class Helper File", "csch" ) );
                
                if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                    
                    currentFile = jfc.getSelectedFile();
                    boolean save = false;
                    
                    if ( currentFile.exists() ) {
                        
                        if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                this, 
                                "<html>The selected file already exists.<br/>Do you want to continue?</html>", 
                                "Overwrite Confirmation" ) == JOptionPane.YES_OPTION ) {
                            save = true;
                        } else {
                            save = false;
                            currentFile = null;
                        }
                        
                    } else {
                        save = true;
                    }
                    
                    if ( save ) {
                        
                        if ( !currentFile.getName().endsWith( ".csch" ) ) {
                            currentFile = new File( currentFile.getAbsolutePath() + ".csch" );
                        }
                        dConfig.setDefaultDir( currentFile.getParentFile() );
                        ObjectOutputStream o = new ObjectOutputStream( new FileOutputStream( currentFile ) );
                        o.writeObject( drawPanel.getDrawPages() );
                        o.close();
                        
                    }
                }
                
            } else {
                
                ObjectOutputStream o = new ObjectOutputStream( new FileOutputStream( currentFile ) );
                o.writeObject( drawPanel.getDrawPages() );
                o.close();
                
            }
            
        } catch ( IOException exc ) {
            exc.printStackTrace();
        }
        
        dConfig.setProcessEventsMainWindow( true );
        
    }

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        
        if ( drawPanel.isAbleToUndo() ) {
            drawPanel.undo();
            drawPanel.repaint();
        }
        
        verifyHistory();
        
    }//GEN-LAST:event_btnUndoActionPerformed

    private void btnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedoActionPerformed
        
        if ( drawPanel.isAbleToRedo() ) {
            drawPanel.redo();
            drawPanel.repaint();
        }
        
        verifyHistory();
        
    }//GEN-LAST:event_btnRedoActionPerformed

    private void colorPanelStrokeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelStrokeMousePressed
        setColorOnColorPanel( evt, colorPanelStroke, "Stroke Color", "sc" );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_colorPanelStrokeMousePressed

    private void colorPanelFillMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFillMousePressed
        setColorOnColorPanel( evt, colorPanelFill, "Fill Color", "fc" );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_colorPanelFillMousePressed

    private void colorPanelBackgroundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelBackgroundMousePressed
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            Color c = JColorChooser.showDialog( this, "Background Color", colorPanelBackground.getColor() );
            if ( c != null ) {
                
                // alpha verification
                if ( c.getAlpha() == 0 ) {
                    c = new Color( c.getRed(), c.getGreen(), c.getBlue(), 1 );
                }
                
                colorPanelBackground.setColor( c );
                drawPanel.setBackgroundColor( c );
                
                // update all EraserCurve shapes to match background color
                drawPanel.updateEraserCurves( c );
                
                colorPanelBackground.repaint();
                drawPanel.repaint();
                dConfig.getColors().put( "bc", c );
                
            }
            
        } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
            popupMenuNoColor.setName( "bc" );
            popupMenuNoColor.show( evt.getComponent(), evt.getX(), evt.getY() );
        }
        
    }//GEN-LAST:event_colorPanelBackgroundMousePressed

    private void menuItemNoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNoColorActionPerformed
        
        ColorPanel cp = (ColorPanel) popupMenuNoColor.getInvoker();
        cp.setColor( null );
        cp.repaint();
        
        dConfig.getColors().put( popupMenuNoColor.getName(), null );
        
        if ( cp == colorPanelBackground ) {
            drawPanel.setBackgroundColor( Constants.TRANSPARENT_COLOR );
            drawPanel.repaint();
        }
        
        updateCrossCursorIfNeeded();
        
    }//GEN-LAST:event_menuItemNoColorActionPerformed

    private void btnHelpAndAcountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpAndAcountActionPerformed
        
        HelpAndAboutDialog tcd = new HelpAndAboutDialog( this, true );
        tcd.setVisible( true );
        
    }//GEN-LAST:event_btnHelpAndAcountActionPerformed

    private void colorPanelSC1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC1MousePressed
        setColorOnColorPanel( evt, colorPanelSC1, "Stroke Color 1", "sc1" );
    }//GEN-LAST:event_colorPanelSC1MousePressed

    private void colorPanelFC1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC1MousePressed
        setColorOnColorPanel( evt, colorPanelFC1, "Fill Color 1", "fc1" );
    }//GEN-LAST:event_colorPanelFC1MousePressed

    private void colorPanelSC2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC2MousePressed
        setColorOnColorPanel( evt, colorPanelSC2, "Stroke Color 2", "sc2" );
    }//GEN-LAST:event_colorPanelSC2MousePressed

    private void colorPanelFC2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC2MousePressed
        setColorOnColorPanel( evt, colorPanelFC2, "Fill Color 2", "fc2" );
    }//GEN-LAST:event_colorPanelFC2MousePressed

    private void colorPanelSC3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC3MousePressed
        setColorOnColorPanel( evt, colorPanelSC3, "Stroke Color 3", "sc3" );
    }//GEN-LAST:event_colorPanelSC3MousePressed

    private void colorPanelFC3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC3MousePressed
        setColorOnColorPanel( evt, colorPanelFC3, "Fill Color 3", "fc3" );
    }//GEN-LAST:event_colorPanelFC3MousePressed

    private void colorPanelSC4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC4MousePressed
        setColorOnColorPanel( evt, colorPanelSC4, "Stroke Color 4", "sc4" );
    }//GEN-LAST:event_colorPanelSC4MousePressed

    private void colorPanelFC4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC4MousePressed
        setColorOnColorPanel( evt, colorPanelFC4, "Fill Color 4", "fc4" );
    }//GEN-LAST:event_colorPanelFC4MousePressed

    private void colorPanelSC5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC5MousePressed
        setColorOnColorPanel( evt, colorPanelSC5, "Stroke Color 5", "sc5" );
    }//GEN-LAST:event_colorPanelSC5MousePressed

    private void colorPanelFC5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC5MousePressed
        setColorOnColorPanel( evt, colorPanelFC5, "Fill Color 5", "fc5" );
    }//GEN-LAST:event_colorPanelFC5MousePressed

    private void colorPanelSC6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC6MousePressed
        setColorOnColorPanel( evt, colorPanelSC6, "Stroke Color 6", "sc6" );
    }//GEN-LAST:event_colorPanelSC6MousePressed

    private void colorPanelFC6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC6MousePressed
        setColorOnColorPanel( evt, colorPanelFC6, "Fill Color 6", "fc6" );
    }//GEN-LAST:event_colorPanelFC6MousePressed

    private void btnPencilMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPencilMouseReleased
        openNewToolConfigDialogStrokeWidth( evt );
    }//GEN-LAST:event_btnPencilMouseReleased

    private void btnLineMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLineMouseReleased
        openNewToolConfigDialogStrokeWidth( evt );
    }//GEN-LAST:event_btnLineMouseReleased

    private void btnRectangleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRectangleMouseReleased
        openNewToolConfigDialogStrokeWidth( evt );
    }//GEN-LAST:event_btnRectangleMouseReleased

    private void btnRoundRectangleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRoundRectangleMouseReleased
        openNewToolConfigDialogStrokeWidthArcRadius( evt );
    }//GEN-LAST:event_btnRoundRectangleMouseReleased

    private void btnPolygonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPolygonMouseReleased
        openNewToolConfigDialogStrokeWidthSideQuantity( evt );
    }//GEN-LAST:event_btnPolygonMouseReleased

    private void btnStarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStarMouseReleased
        openNewToolConfigDialogStrokeWidthSideQuantity( evt );
    }//GEN-LAST:event_btnStarMouseReleased

    private void btnPrintScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintScreenActionPerformed
        
        dConfig.setProcessEventsMainWindow( false );
        
        try {
            
            Robot r = new Robot();
            BufferedImage bi = r.createScreenCapture( new java.awt.Rectangle( getWidth(), getHeight() ) );
            
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory( dConfig.getDefaultDir() );
            jfc.setDialogTitle( "Save Print Screen" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileFilter( new FileNameExtensionFilter( "Portable Network Graphics", "png" ) );
            
            if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                File f = jfc.getSelectedFile();
                if ( !f.getName().endsWith( ".png" ) ) {
                    f = new File( f.getAbsolutePath() + ".png" );
                }
                dConfig.setDefaultDir( f.getParentFile() );
                ImageIO.write( bi, "png", f );
            }
            
        } catch ( AWTException | IOException exc ) {
            exc.printStackTrace();
        }
        
        dConfig.setProcessEventsMainWindow( true );
        
    }//GEN-LAST:event_btnPrintScreenActionPerformed

    private void btnClearCurrentDrawPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCurrentDrawPageActionPerformed
        
        if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                this, 
                "<html>Clean the current draw page?<br/>This operation cannot be undone!</html>", "Clear Current Draw Page" ) == JOptionPane.YES_OPTION ) {
            drawPanel.clearCurrentDrawPage();
            drawPanel.repaint();
            verifyHistory();
        }
        
    }//GEN-LAST:event_btnClearCurrentDrawPageActionPerformed

    private void btnPencilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPencilActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.PENCIL, null ) );
    }//GEN-LAST:event_btnPencilActionPerformed

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnLineActionPerformed

    private void btnRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectangleActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnRectangleActionPerformed

    private void btnRoundRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoundRectangleActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnRoundRectangleActionPerformed

    private void btnEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEllipseActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnEllipseActionPerformed

    private void btnPolygonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPolygonActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnPolygonActionPerformed

    private void btnStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStarActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
        updateCrossCursorIfNeeded();
    }//GEN-LAST:event_btnStarActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.MOVE, null ) );
    }//GEN-LAST:event_btnMoveActionPerformed

    private void btnFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.BUCKET, null ) );
    }//GEN-LAST:event_btnFillActionPerformed

    private void colorPanelSC7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC7MousePressed
        setColorOnColorPanel( evt, colorPanelSC7, "Stroke Color 7", "sc7" );
    }//GEN-LAST:event_colorPanelSC7MousePressed

    private void colorPanelFC7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC7MousePressed
        setColorOnColorPanel( evt, colorPanelFC7, "Fill Color 7", "fc7" );
    }//GEN-LAST:event_colorPanelFC7MousePressed

    private void colorPanelSC8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelSC8MousePressed
        setColorOnColorPanel( evt, colorPanelSC8, "Stroke Color 8", "sc8" );
    }//GEN-LAST:event_colorPanelSC8MousePressed

    private void colorPanelFC8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelFC8MousePressed
        setColorOnColorPanel( evt, colorPanelFC8, "Fill Color 8", "fc8" );
    }//GEN-LAST:event_colorPanelFC8MousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing

    private void btnPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaletteActionPerformed
        
        ToolConfigDialogPalette tcp = new ToolConfigDialogPalette( this, true );
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        tcp.setLocation( d.width - 560, 10 );
        tcp.setVisible( true );
        
    }//GEN-LAST:event_btnPaletteActionPerformed

    private void btnEllipseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEllipseMouseReleased
        openNewToolConfigDialogStrokeWidth( evt );
    }//GEN-LAST:event_btnEllipseMouseReleased

    private void btnEraserMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEraserMouseReleased
        openNewToolConfigDialogEraserWidth( evt );
    }//GEN-LAST:event_btnEraserMouseReleased

    private void btnEraserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraserActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.ERASER, null ) );
    }//GEN-LAST:event_btnEraserActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.IMAGE, null ) );
    }//GEN-LAST:event_btnAddImageActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        openDrawPagesPreviewDialog();
    }//GEN-LAST:event_btnPreviewActionPerformed

    private void menuItemDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDuplicateActionPerformed
        drawPanel.duplicateShape( selectedShape );
        if ( selectedShape != null ) {
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
        }
        drawPanel.repaint();
    }//GEN-LAST:event_menuItemDuplicateActionPerformed

    private void popupMenuShapeOptionsPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popupMenuShapeOptionsPopupMenuCanceled
        if ( selectedShape != null ) {
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
        }
        drawPanel.repaint();
    }//GEN-LAST:event_popupMenuShapeOptionsPopupMenuCanceled

    private void btnAddTextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddTextMouseReleased
        openNewToolConfigDialogText( evt );
    }//GEN-LAST:event_btnAddTextMouseReleased

    private void btnAddTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTextActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.TEXT, null ) );
    }//GEN-LAST:event_btnAddTextActionPerformed

    private void menuItemEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEditTextActionPerformed
        
        if ( selectedShape != null && selectedShape instanceof Text ) {
            
            Text text = (Text) selectedShape;
            
            ToolConfigDialogTextValue tcdt = new ToolConfigDialogTextValue( this, true, text.getText() );
            tcdt.setVisible( true );

            String textValue = tcdt.getText();
            
            if ( textValue != null ) {
                text.setText( textValue );
                drawPanel.repaint();
            }
            
            if ( selectedShape != null ) {
                selectedShape.setSelected( false );
                destroySelectedRepaintRunnable();
                selectedShape = null;
            }
            
            drawPanel.repaint();
            
        }
        
    }//GEN-LAST:event_menuItemEditTextActionPerformed

    private void menuItemMoveFrontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMoveFrontActionPerformed
        
        if ( selectedShape != null ) {
            drawPanel.moveFront( selectedShape );
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
            drawPanel.repaint();
        }
        
    }//GEN-LAST:event_menuItemMoveFrontActionPerformed

    private void menuItemForwardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemForwardsActionPerformed
        
        if ( selectedShape != null ) {
            drawPanel.moveForwards( selectedShape );
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
            drawPanel.repaint();
        }
        
    }//GEN-LAST:event_menuItemForwardsActionPerformed

    private void menuItemMoveBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMoveBackActionPerformed
        
        if ( selectedShape != null ) {
            drawPanel.moveBack( selectedShape );
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
            drawPanel.repaint();
        }
        
    }//GEN-LAST:event_menuItemMoveBackActionPerformed

    private void menuItemBackwardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBackwardsActionPerformed
        
        if ( selectedShape != null ) {
            drawPanel.moveBackwards( selectedShape );
            selectedShape.setSelected( false );
            destroySelectedRepaintRunnable();
            selectedShape = null;
            drawPanel.repaint();
        }
        
    }//GEN-LAST:event_menuItemBackwardsActionPerformed

    private void menuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRemoveActionPerformed
        removeSelectedShape();
    }//GEN-LAST:event_menuItemRemoveActionPerformed

    private void btnDrawLineSheetMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDrawLineSheetMouseReleased
        openLineSheetConfiguration( evt );
    }//GEN-LAST:event_btnDrawLineSheetMouseReleased

    private void btnDrawLineSheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawLineSheetActionPerformed
        
        drawPanel.getCurrentDrawPage().setDrawLineSheet( btnDrawLineSheet.isSelected() );
        drawPanel.getCurrentDrawPage().setDrawGrid( false );
        btnDrawGrid.setSelected( false );
        
        dConfig.setDrawLineSheet( drawPanel.getCurrentDrawPage().isDrawLineSheet() );
        dConfig.setDrawGrid( drawPanel.getCurrentDrawPage().isDrawGrid() );
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnDrawLineSheetActionPerformed

    private void btnDrawGridMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDrawGridMouseReleased
        openGridConfiguration( evt );
    }//GEN-LAST:event_btnDrawGridMouseReleased

    private void btnDrawGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawGridActionPerformed
        
        drawPanel.getCurrentDrawPage().setDrawGrid( btnDrawGrid.isSelected() );
        drawPanel.getCurrentDrawPage().setDrawLineSheet( false );
        btnDrawLineSheet.setSelected( false );
        
        dConfig.setDrawLineSheet( drawPanel.getCurrentDrawPage().isDrawLineSheet() );
        dConfig.setDrawGrid( drawPanel.getCurrentDrawPage().isDrawGrid() );
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnDrawGridActionPerformed

    private void btnBrushMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrushMouseReleased
        openNewToolConfigDialogStrokeWidth( evt );
    }//GEN-LAST:event_btnBrushMouseReleased

    private void btnBrushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrushActionPerformed
        drawPanel.setCursor( Cursors.getCursor( Cursors.Type.BRUSH, null ) );
    }//GEN-LAST:event_btnBrushActionPerformed

    private void radioItemLineSheetTinyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemLineSheetTinyActionPerformed
        drawPanel.getCurrentDrawPage().getLineSheet().setDistanceTo15();
        dConfig.setLineSheetDistance( drawPanel.getCurrentDrawPage().getLineSheet().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemLineSheetTinyActionPerformed

    private void radioItemLineSheetSmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemLineSheetSmallActionPerformed
        drawPanel.getCurrentDrawPage().getLineSheet().setDistanceTo30();
        dConfig.setLineSheetDistance( drawPanel.getCurrentDrawPage().getLineSheet().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemLineSheetSmallActionPerformed

    private void radioItemLineSheetMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemLineSheetMediumActionPerformed
        drawPanel.getCurrentDrawPage().getLineSheet().setDistanceTo45();
        dConfig.setLineSheetDistance( drawPanel.getCurrentDrawPage().getLineSheet().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemLineSheetMediumActionPerformed

    private void radioItemLineSheetBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemLineSheetBigActionPerformed
        drawPanel.getCurrentDrawPage().getLineSheet().setDistanceTo60();
        dConfig.setLineSheetDistance( drawPanel.getCurrentDrawPage().getLineSheet().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemLineSheetBigActionPerformed

    private void menuItemLineSheetColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLineSheetColorActionPerformed
        
        LineSheet ls = drawPanel.getCurrentDrawPage().getLineSheet();
        
        Color c = JColorChooser.showDialog( this, "Line Sheet Color", ls.getStrokeColor() );
        
        if ( c != null ) {
            ls.setStrokeColor( c );
            drawPanel.repaint();
            dConfig.getColors().put( "lsc", c );
        }
        
    }//GEN-LAST:event_menuItemLineSheetColorActionPerformed

    private void menuItemGridColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGridColorActionPerformed
        
        Grid g = drawPanel.getCurrentDrawPage().getGrid();
        
        Color c = JColorChooser.showDialog( this, "Grid Color", g.getStrokeColor() );
        
        if ( c != null ) {
            g.setStrokeColor( c );
            drawPanel.repaint();
            dConfig.getColors().put( "gc", c );
        }
        
    }//GEN-LAST:event_menuItemGridColorActionPerformed

    private void radioItemGridTinyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemGridTinyActionPerformed
        drawPanel.getCurrentDrawPage().getGrid().setDistanceTo15();
        dConfig.setGridDistance( drawPanel.getCurrentDrawPage().getGrid().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemGridTinyActionPerformed

    private void radioItemGridSmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemGridSmallActionPerformed
        drawPanel.getCurrentDrawPage().getGrid().setDistanceTo30();
        dConfig.setGridDistance( drawPanel.getCurrentDrawPage().getGrid().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemGridSmallActionPerformed

    private void radioItemGridMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemGridMediumActionPerformed
        drawPanel.getCurrentDrawPage().getGrid().setDistanceTo45();
        dConfig.setGridDistance( drawPanel.getCurrentDrawPage().getGrid().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemGridMediumActionPerformed

    private void radioItemGridBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioItemGridBigActionPerformed
        drawPanel.getCurrentDrawPage().getGrid().setDistanceTo60();
        dConfig.setGridDistance( drawPanel.getCurrentDrawPage().getGrid().getDistance() );
        drawPanel.repaint();
    }//GEN-LAST:event_radioItemGridBigActionPerformed

    public void moveColors( Map<String, Color> colors ) {
        
        colorPanelSC1.setColor( colors.get( "sc1" ) );
        colorPanelSC2.setColor( colors.get( "sc2" ) );
        colorPanelSC3.setColor( colors.get( "sc3" ) );
        colorPanelSC4.setColor( colors.get( "sc4" ) );
        colorPanelSC5.setColor( colors.get( "sc5" ) );
        colorPanelSC6.setColor( colors.get( "sc6" ) );
        colorPanelSC7.setColor( colors.get( "sc7" ) );
        colorPanelSC8.setColor( colors.get( "sc8" ) );
        
        colorPanelFC1.setColor( colors.get( "fc1" ) );
        colorPanelFC2.setColor( colors.get( "fc2" ) );
        colorPanelFC3.setColor( colors.get( "fc3" ) );
        colorPanelFC4.setColor( colors.get( "fc4" ) );
        colorPanelFC5.setColor( colors.get( "fc5" ) );
        colorPanelFC6.setColor( colors.get( "fc6" ) );
        colorPanelFC7.setColor( colors.get( "fc7" ) );
        colorPanelFC8.setColor( colors.get( "fc8" ) );
        
        Map<String, Color> dConfigColors = dConfig.getColors();
        
        for ( Map.Entry<String, Color> e : colors.entrySet() ) {
            dConfigColors.put( e.getKey(), e.getValue() );
        }
        
        paletteToolBar.repaint();
        
    }
    
    private class ApplicationKeyEventDispatcher implements KeyEventDispatcher {
        
        JFrame mainFrame;

        public ApplicationKeyEventDispatcher( JFrame mainFrame ) {
            this.mainFrame = mainFrame;
        }
        
        @Override
        public boolean dispatchKeyEvent( KeyEvent e ) {
            
            if ( dConfig.isProcessEventsMainWindow() ) {
                
                if ( e.getID() == KeyEvent.KEY_RELEASED ) {

                    if ( e.getKeyCode() == KeyEvent.VK_SHIFT ) {
                        isShiftDown = false;
                    }
                    
                    if ( e.isShiftDown() ) {
                        
                        switch ( e.getKeyCode() ) {

                            case KeyEvent.VK_ESCAPE:
                                toggleToolBars();
                                break;
                                
                            case KeyEvent.VK_RIGHT:
                                if ( drawPanel.willMoveToRightCurrentDrawPage() ) {
                                    
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Move the current draw page to the right?</html>", "Move Current Draw Page" ) == JOptionPane.YES_OPTION ) {
                                        drawPanel.moveCurrentDrawPageToRight();
                                        drawPanel.repaint();
                                    }
                                    
                                    configureLineSheetAndGridGUI();
                                    updateLabelPages();
                                    
                                }
                                break;
                                
                            case KeyEvent.VK_LEFT:
                                if ( drawPanel.willMoveToLeftCurrentDrawPage() ) {
                                    
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Move the current draw page to the left?</html>", "Move Current Draw Page" ) == JOptionPane.YES_OPTION ) {
                                        drawPanel.moveCurrentDrawPageToLeft();
                                        drawPanel.repaint();
                                    }
                                    
                                    configureLineSheetAndGridGUI();
                                    updateLabelPages();
                                    
                                }
                                break;
                                
                            case KeyEvent.VK_S: // stroke color
                                dispatchMouseEvent( colorPanelStroke, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                                
                            case KeyEvent.VK_F: // fill color
                                dispatchMouseEvent( colorPanelFill, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                                
                            case KeyEvent.VK_B: // background color
                                dispatchMouseEvent( colorPanelBackground, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                                
                            case KeyEvent.VK_1:
                                dispatchMouseEvent( colorPanelSC1, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_2:
                                dispatchMouseEvent( colorPanelSC2, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_3:
                                dispatchMouseEvent( colorPanelSC3, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_4:
                                dispatchMouseEvent( colorPanelSC4, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_5:
                                dispatchMouseEvent( colorPanelSC5, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_6:
                                dispatchMouseEvent( colorPanelSC6, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_7:
                                dispatchMouseEvent( colorPanelSC7, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_8:
                                dispatchMouseEvent( colorPanelSC8, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;

                        }

                    } else if ( e.isControlDown() ) {

                        switch ( e.getKeyCode() ) {
                                
                            case KeyEvent.VK_DELETE:
                                if ( drawPanel.canDeleteDrawPage() ) {
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Delete the current draw page?<br/>This operation cannot be undone!</html>", "Delete Current Draw Page" ) == JOptionPane.YES_OPTION ) {
                                        drawPanel.deleteCurrentDrawPage();
                                        drawPanel.repaint();
                                    }
                                }
                                updateLabelPages();
                                break;
                                
                            case KeyEvent.VK_RIGHT:
                                //if ( !btnMove.isSelected() && selectedShape == null ) {
                                if ( selectedShape == null ) {
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Duplicate the current draw page to the right?</html>", "Duplicate Current Draw Page" ) == JOptionPane.YES_OPTION ) {
                                        drawPanel.duplicateCurrentDrawPageToRight();
                                        drawPanel.repaint();
                                    }
                                    updateLabelPages();
                                }
                                break;
                                
                            case KeyEvent.VK_LEFT:
                                //if ( !btnMove.isSelected() && selectedShape == null ) {
                                if ( selectedShape == null ) {
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Duplicate the current draw page to the left?</html>", "Duplicate Current Draw Page" ) == JOptionPane.YES_OPTION ) {
                                        drawPanel.duplicateCurrentDrawPageToLeft();
                                        drawPanel.repaint();
                                    }
                                    updateLabelPages();
                                }
                                break;
                                
                            case KeyEvent.VK_D: // minimize
                                setState( JFrame.ICONIFIED );
                                break;
                                
                            case KeyEvent.VK_N: // new
                                dispatchActionEvent( btnNew );
                                break;
                                
                            case KeyEvent.VK_O: // open
                                dispatchActionEvent( btnOpen );
                                break;
                                
                            case KeyEvent.VK_S: // save
                                dispatchActionEvent( btnSave );
                                break;
                                
                            /*case KeyEvent.VK_Z: // undo
                                dispatchActionEvent( btnUndo );
                                break;
                                
                            case KeyEvent.VK_Y: // redo
                                dispatchActionEvent( btnRedo );
                                break;*/
                                
                            case KeyEvent.VK_BACK_SPACE: // clear current draw page
                                dispatchActionEvent( btnClearCurrentDrawPage );
                                break;

                            case KeyEvent.VK_1:
                                dispatchMouseEvent( colorPanelFC1, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_2:
                                dispatchMouseEvent( colorPanelFC2, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_3:
                                dispatchMouseEvent( colorPanelFC3, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_4:
                                dispatchMouseEvent( colorPanelFC4, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_5:
                                dispatchMouseEvent( colorPanelFC5, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_6:
                                dispatchMouseEvent( colorPanelFC6, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_7:
                                dispatchMouseEvent( colorPanelFC7, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                            case KeyEvent.VK_8:
                                dispatchMouseEvent( colorPanelFC8, 
                                        MouseEvent.MOUSE_PRESSED, 
                                        MouseEvent.BUTTON1_DOWN_MASK );
                                break;
                                
                        }

                    } else if ( e.isAltDown() ) { 
                        
                        switch ( e.getKeyCode() ) {
                            
                            case KeyEvent.VK_S:
                                colorPanelStroke.setColor( null );
                                colorPanelStroke.repaint();
                                break;
                                
                            case KeyEvent.VK_F:
                                colorPanelFill.setColor( null );
                                colorPanelFill.repaint();
                                break;
                                
                            case KeyEvent.VK_B:
                                colorPanelBackground.setColor( null );
                                drawPanel.setBackgroundColor( null );
                                colorPanelBackground.repaint();
                                drawPanel.repaint();
                                break;
                            
                        }
                        
                    } else {

                        switch ( e.getKeyCode() ) {
                            
                            case KeyEvent.VK_HOME:
                                openDrawPagesPreviewDialog();
                                break;
                                
                            case KeyEvent.VK_UP:
                                
                                //if ( !btnMove.isSelected() && selectedShape == null ) {
                                if ( selectedShape == null ) {
                                
                                    if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                            mainFrame, 
                                            "<html>Create a new draw page?</html>", "New Draw Page" ) == JOptionPane.YES_OPTION ) {

                                        DrawPage dp = drawPanel.getCurrentDrawPage();
                                        
                                        drawPanel.newDrawPage( colorPanelBackground.getColor() );
                                        
                                        drawPanel.getCurrentDrawPage().getLineSheet().setStrokeColor( dp.getLineSheet().getStrokeColor() );
                                        drawPanel.getCurrentDrawPage().getLineSheet().setDistance( dp.getLineSheet().getDistance() );
                                        drawPanel.getCurrentDrawPage().setDrawLineSheet( dp.isDrawLineSheet() );

                                        drawPanel.getCurrentDrawPage().getGrid().setStrokeColor( dp.getGrid().getStrokeColor() );
                                        drawPanel.getCurrentDrawPage().getGrid().setDistance( dp.getGrid().getDistance() );
                                        drawPanel.getCurrentDrawPage().setDrawGrid( dp.isDrawGrid() );
                                            
                                        configureLineSheetAndGridGUI();
                                        drawPanel.repaint();
                                        updateLabelPages();

                                    }
                                
                                }
                                
                                break;
                                
                            case KeyEvent.VK_RIGHT:
                                
                                //if ( !btnMove.isSelected() && selectedShape == null ) {
                                if ( selectedShape == null ) {
                                
                                    if ( drawPanel.willCreateNewEndDrawPage() ) {
                                        if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                                mainFrame, 
                                                "<html>Create a new draw page to the right?</html>", "New Draw Page" ) == JOptionPane.YES_OPTION ) {

                                            DrawPage dp = drawPanel.getCurrentDrawPage();

                                            drawPanel.nextDrawPage( colorPanelBackground.getColor() );

                                            drawPanel.getCurrentDrawPage().getLineSheet().setStrokeColor( dp.getLineSheet().getStrokeColor() );
                                            drawPanel.getCurrentDrawPage().getLineSheet().setDistance( dp.getLineSheet().getDistance() );
                                            drawPanel.getCurrentDrawPage().setDrawLineSheet( dp.isDrawLineSheet() );

                                            drawPanel.getCurrentDrawPage().getGrid().setStrokeColor( dp.getGrid().getStrokeColor() );
                                            drawPanel.getCurrentDrawPage().getGrid().setDistance( dp.getGrid().getDistance() );
                                            drawPanel.getCurrentDrawPage().setDrawGrid( dp.isDrawGrid() );

                                        }
                                    } else {

                                        drawPanel.nextDrawPage( null );

                                        if ( drawPanel.getBackgroundColor().equals( Constants.TRANSPARENT_COLOR ) ) {
                                            colorPanelBackground.setColor( null );
                                        } else {
                                            colorPanelBackground.setColor( drawPanel.getBackgroundColor() );
                                        }

                                    }

                                    configureLineSheetAndGridGUI();
                                    drawPanel.repaint();
                                    updateLabelPages();
                                
                                }
                                
                                break;

                            case KeyEvent.VK_LEFT:
                                
                                //if ( !btnMove.isSelected() && selectedShape == null ) {
                                if ( selectedShape == null ) {
                                    
                                    if ( drawPanel.willCreateNewStartDrawPage() ) {
                                        if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                                                mainFrame, 
                                                "<html>Create a new draw page to the left?</html>", "New Draw Page" ) == JOptionPane.YES_OPTION ) {

                                            DrawPage dp = drawPanel.getCurrentDrawPage();

                                            drawPanel.previousDrawPage( colorPanelBackground.getColor() );

                                            drawPanel.getCurrentDrawPage().getLineSheet().setStrokeColor( dp.getLineSheet().getStrokeColor() );
                                            drawPanel.getCurrentDrawPage().getLineSheet().setDistance( dp.getLineSheet().getDistance() );
                                            drawPanel.getCurrentDrawPage().setDrawLineSheet( dp.isDrawLineSheet() );

                                            drawPanel.getCurrentDrawPage().getGrid().setStrokeColor( dp.getGrid().getStrokeColor() );
                                            drawPanel.getCurrentDrawPage().getGrid().setDistance( dp.getGrid().getDistance() );
                                            drawPanel.getCurrentDrawPage().setDrawGrid( dp.isDrawGrid() );

                                        }
                                    } else {

                                        drawPanel.previousDrawPage( null );

                                        if ( drawPanel.getBackgroundColor().equals( Constants.TRANSPARENT_COLOR ) ) {
                                            colorPanelBackground.setColor( null );
                                        } else {
                                            colorPanelBackground.setColor( drawPanel.getBackgroundColor() );
                                        }

                                    }

                                    configureLineSheetAndGridGUI();
                                    drawPanel.repaint();
                                    updateLabelPages();
                                    
                                }
                                break;

                            case KeyEvent.VK_1:
                            case KeyEvent.VK_NUMPAD1:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC1, colorPanelFC1, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;

                            case KeyEvent.VK_2:
                            case KeyEvent.VK_NUMPAD2:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC2, colorPanelFC2, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;

                            case KeyEvent.VK_3:
                            case KeyEvent.VK_NUMPAD3:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC3, colorPanelFC3, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;

                            case KeyEvent.VK_4:
                            case KeyEvent.VK_NUMPAD4:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC4, colorPanelFC4, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;

                            case KeyEvent.VK_5:
                            case KeyEvent.VK_NUMPAD5:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC5, colorPanelFC5, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;

                            case KeyEvent.VK_6:
                            case KeyEvent.VK_NUMPAD6:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC6, colorPanelFC6, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;
                                
                            case KeyEvent.VK_7:
                            case KeyEvent.VK_NUMPAD7:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC7, colorPanelFC7, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;
                                
                            case KeyEvent.VK_8:
                            case KeyEvent.VK_NUMPAD8:
                                transferCodeBetweenColorPanels( 
                                        colorPanelSC8, colorPanelFC8, 
                                        colorPanelStroke, colorPanelFill );
                                persistColorConfig();
                                updateCrossCursorIfNeeded();
                                break;
                                
                            case KeyEvent.VK_DELETE:
                                removeSelectedShape();
                                break;
                                
                            case KeyEvent.VK_PRINTSCREEN:
                                dispatchActionEvent( btnPrintScreen );
                                break;
                                
                            case KeyEvent.VK_P: // pencil
                                btnPencil.setSelected( true );
                                dispatchActionEvent( btnPencil );
                                break;
                                
                            case KeyEvent.VK_B: // brush
                                btnBrush.setSelected( true );
                                dispatchActionEvent( btnBrush );
                                break;
                                
                            case KeyEvent.VK_E: // eraser
                                btnEraser.setSelected( true );
                                dispatchActionEvent( btnEraser );
                                break;
                                
                            case KeyEvent.VK_L: // line
                                btnLine.setSelected( true );
                                dispatchActionEvent( btnLine );
                                break;
                                
                            case KeyEvent.VK_R: // rectangle
                                btnRectangle.setSelected( true );
                                dispatchActionEvent( btnRectangle );
                                break;
                                
                            case KeyEvent.VK_A: // round rectangle
                                btnRoundRectangle.setSelected( true );
                                dispatchActionEvent( btnRoundRectangle );
                                break;
                                
                            case KeyEvent.VK_S: // ellipse
                                btnEllipse.setSelected( true );
                                dispatchActionEvent( btnEllipse );
                                break;
                                
                            case KeyEvent.VK_G: // polygon
                                btnPolygon.setSelected( true );
                                dispatchActionEvent( btnPolygon );
                                break;
                                
                            case KeyEvent.VK_T: // star
                                btnStar.setSelected( true );
                                dispatchActionEvent( btnStar );
                                break;
                                
                            case KeyEvent.VK_I: // add image
                                btnAddImage.setSelected( true );
                                dispatchActionEvent( btnAddImage );
                                break;
                                
                            case KeyEvent.VK_X: // add image
                                btnAddText.setSelected( true );
                                dispatchActionEvent( btnAddText );
                                break;
                                
                            case KeyEvent.VK_M: // move
                                btnMove.setSelected( true );
                                dispatchActionEvent( btnMove );
                                break;
                                
                            case KeyEvent.VK_F: // fill
                                btnFill.setSelected( true );
                                dispatchActionEvent( btnFill );
                                break;
                                
                            case KeyEvent.VK_C: // palette
                                dispatchActionEvent( btnPalette );
                                break;
                                
                            case KeyEvent.VK_H: // draw line sheet
                                btnDrawLineSheet.setSelected( !btnDrawLineSheet.isSelected() );
                                dispatchActionEvent( btnDrawLineSheet );
                                break;
                                
                            case KeyEvent.VK_D: // draw grid
                                btnDrawGrid.setSelected( !btnDrawGrid.isSelected() );
                                dispatchActionEvent( btnDrawGrid );
                                break;
                                
                            case KeyEvent.VK_F1: // help and about
                                dispatchActionEvent( btnHelpAndAcount );
                                break;
                                
                        }

                    }

                } else if ( e.getID() == KeyEvent.KEY_PRESSED ) {
                    
                    if ( e.isControlDown() ) {

                        switch ( e.getKeyCode() ) {
                            
                            case KeyEvent.VK_RIGHT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.setAngle( selectedShape.getAngle() + 1 );
                                }
                                break;
                                
                            case KeyEvent.VK_LEFT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.setAngle( selectedShape.getAngle() - 1 );
                                }
                                break;
                                
                            case KeyEvent.VK_UP:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.setScale( selectedShape.getScale() + 0.005 );
                                }
                                break;
                                
                            case KeyEvent.VK_DOWN:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.setScale( selectedShape.getScale() - 0.005 );
                                }
                                break;
                                
                            case KeyEvent.VK_Z: // undo
                                dispatchActionEvent( btnUndo );
                                break;
                                
                            case KeyEvent.VK_Y: // redo
                                dispatchActionEvent( btnRedo );
                                break;
                                
                        }
                                
                    } else if ( e.isShiftDown() ) {
                        
                        isShiftDown = true;
                        
                        switch ( e.getKeyCode() ) {
                            
                            case KeyEvent.VK_RIGHT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 10, 0 );
                                }
                                break;
                                
                            case KeyEvent.VK_LEFT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( -10, 0 );
                                }
                                break;
                                
                            case KeyEvent.VK_UP:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 0, -10 );
                                } else {
                                    setBounds( 0, 0, getWidth(), getHeight() - 1 );
                                }
                                break;
                                
                            case KeyEvent.VK_DOWN:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 0, 10 );
                                } else {
                                    setBounds( 0, 0, getWidth(), getHeight() + 1 );
                                }
                                break;
                                
                        }
                        
                    } else {
                        
                        switch ( e.getKeyCode() ) {
                            
                            case KeyEvent.VK_RIGHT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 1, 0 );
                                }
                                break;
                                
                            case KeyEvent.VK_LEFT:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( -1, 0 );
                                }
                                break;
                                
                            case KeyEvent.VK_UP:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 0, -1 );
                                }
                                break;
                                
                            case KeyEvent.VK_DOWN:
                                if ( btnMove.isSelected() && selectedShape != null ) {
                                    selectedShape.move( 0, 1 );
                                }
                                break;
                                
                        }
                        
                    }
                    
                }
                
            }
            
            return false;
            
        }
        
    }

    private void persistColorConfig() {
        dConfig.getColors().put( "sc", colorPanelStroke.getColor() );
        dConfig.getColors().put( "fc", colorPanelFill.getColor() );
    }

    private void updateCrossCursorIfNeeded() {
        if ( drawPanel.getCursor().getName().equals( "cross" ) ) {
            Color c = colorPanelStroke.getColor();
            if ( c != null ) {
                drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, c ) );
            } else {
                c = colorPanelFill.getColor();
                if ( c != null ) {
                    drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, c ) );
                } else {
                    drawPanel.setCursor( Cursors.getCursor( Cursors.Type.CROSS, Color.BLACK ) );
                }
            }
        }
    }
    
    private void toggleToolBars() {
        mainToolBar.setVisible( !mainToolBar.isVisible() );
        paletteToolBar.setVisible( !paletteToolBar.isVisible() );
        statusToolBar.setVisible( !statusToolBar.isVisible() );
    }
    
    private void setColorOnColorPanel( MouseEvent evt, ColorPanel colorPanel, String dialogTitle, String colorName ) {
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            Color c = JColorChooser.showDialog( this, dialogTitle, colorPanel.getColor() );
            if ( c != null ) {
                colorPanel.setColor( c );
                dConfig.getColors().put( colorName, c );
                colorPanel.repaint();
            }
        } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
            popupMenuNoColor.setName( colorName );
            popupMenuNoColor.show( evt.getComponent(), evt.getX(), evt.getY() );
        }
        
    }
    
    private void openLineSheetConfiguration( MouseEvent evt ) {
        
        LineSheet ls = drawPanel.getCurrentDrawPage().getLineSheet();
        
        switch ( ls.getDistance() ) {
            case 15:
                radioItemLineSheetTiny.setSelected( true );
                break;
            case 30:
                radioItemLineSheetSmall.setSelected( true );
                break;
            case 45:
                radioItemLineSheetMedium.setSelected( true );
                break;
            case 60:
                radioItemLineSheetBig.setSelected( true );
                break;
        }
        
        ( (ColoredJMenuItem) menuItemLineSheetColor ).setColor( ls.getStrokeColor() );
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            popupMenuLineSheet.show( evt.getComponent(), evt.getX(), evt.getY() );
        }
        
    }
    
    private void openGridConfiguration( MouseEvent evt ) {
        
        Grid g = drawPanel.getCurrentDrawPage().getGrid();
        
        switch ( g.getDistance() ) {
            case 15:
                radioItemGridTiny.setSelected( true );
                break;
            case 30:
                radioItemGridSmall.setSelected( true );
                break;
            case 45:
                radioItemGridMedium.setSelected( true );
                break;
            case 60:
                radioItemGridBig.setSelected( true );
                break;
        }
        
        ( (ColoredJMenuItem) menuItemGridColor ).setColor( g.getStrokeColor() );
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            popupMenuGrid.show( evt.getComponent(), evt.getX(), evt.getY() );
        }
        
    }
    
    private void transferCodeBetweenColorPanels( 
            ColorPanel sourceStroke, 
            ColorPanel sourceFill, 
            ColorPanel targetStroke, 
            ColorPanel targetFill ) {
        
        targetStroke.setColor( sourceStroke.getColor() );
        targetFill.setColor( sourceFill.getColor() );
        
        targetStroke.repaint();
        targetFill.repaint();
        
    }
    
    private void removeSelectedShape() {
        
        if ( selectedShape != null ) {
            
            /*if ( CustomMessageAndConfirmDialog.showConfirmDialog( 
                    this, 
                    "<html>Do you want to remove the selected drawing?<br/>This operation cannot be undone!</html>", 
                    "Remove Confirmation" ) == JOptionPane.YES_OPTION ) {
                drawPanel.removeShape( selectedShape );
            }*/
            
            selectedShape.setSelected( false );
            
            RemoveShapeChangeAction rca = new RemoveShapeChangeAction( selectedShape, drawPanel.getCurrentDrawPage() );
            drawPanel.addChangeAction( rca );
            
            drawPanel.removeShape( selectedShape );
            
            selectedShape = null;
            destroySelectedRepaintRunnable();
            drawPanel.repaint();
            
        }
        
    }
    
    private void openNewToolConfigDialogStrokeWidth( MouseEvent evt ) {
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            ToolConfigDialogStrokeWidth tcd = new ToolConfigDialogStrokeWidth( this, true );
            Point loc = evt.getLocationOnScreen();
            tcd.setLocation( loc.x, loc.y - 20 );
            tcd.setVisible( true );
            
        }
        
    }
    
    private void openNewToolConfigDialogEraserWidth( MouseEvent evt ) {
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            ToolConfigDialogEraserWidth tcd = new ToolConfigDialogEraserWidth( this, true );
            Point loc = evt.getLocationOnScreen();
            tcd.setLocation( loc.x, loc.y - 20 );
            tcd.setVisible( true );
            
        }
        
    }
    
    private void openNewToolConfigDialogStrokeWidthSideQuantity( MouseEvent evt ) {
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            ToolConfigDialogStrokeWidthSideQuantity tcd = new ToolConfigDialogStrokeWidthSideQuantity( this, true );
            Point loc = evt.getLocationOnScreen();
            tcd.setLocation( loc.x, loc.y - 40 );
            tcd.setVisible( true );
            
        }
        
    }
    
    private void openNewToolConfigDialogStrokeWidthArcRadius( MouseEvent evt ) {
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            ToolConfigDialogStrokeWidthArcRadius tcd = new ToolConfigDialogStrokeWidthArcRadius( this, true );
            Point loc = evt.getLocationOnScreen();
            tcd.setLocation( loc.x, loc.y - 40 );
            tcd.setVisible( true );
            
        }
        
    }
    
    private void openNewToolConfigDialogText( MouseEvent evt ) {
        
        if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            ToolConfigDialogText tcd = new ToolConfigDialogText( this, true );
            Point loc = evt.getLocationOnScreen();
            tcd.setLocation( loc.x, loc.y - 20 );
            tcd.setVisible( true );
            
        }
        
    }
    
    private void openDrawPagesPreviewDialog() {
        
        DrawPagesPreviewDialog dppd = new DrawPagesPreviewDialog( 
                this, 
                true, 
                drawPanel.getDrawPages() );
        
        dppd.setLocation( 
                getWidth() / 2 - dppd.getWidth() / 2,
                getHeight() / 2 - dppd.getHeight() / 2);
        
        dppd.setVisible( true );
        
    }
    
    private void verifyHistory() {
        
        if ( drawPanel.isAbleToUndo() ) {
            btnUndo.setEnabled( true );
        } else {
            btnUndo.setEnabled( false );
        }
        
        if ( drawPanel.isAbleToRedo() ) {
            btnRedo.setEnabled( true );
        } else {
            btnRedo.setEnabled( false );
        }
        
    }
    
    private void updateLabelPages() {
        lblPages.setText( String.format( "    %d/%d", drawPanel.getCurrentDrawPageIndex()+1, drawPanel.getDrawPages().size() ) );
    }
    
    private void loadConfigurations() {
        
        colorPanelStroke.setColor( dConfig.getColors().get( "sc" ) );
        colorPanelFill.setColor( dConfig.getColors().get( "fc" ) );
        colorPanelBackground.setColor( dConfig.getColors().get( "bc" ) );
        
        LineSheet ls = drawPanel.getCurrentDrawPage().getLineSheet();
        Grid g = drawPanel.getCurrentDrawPage().getGrid();
        
        ls.setStrokeColor( dConfig.getColors().get( "lsc" ) );
        ls.setDistance( dConfig.getLineSheetDistance() );
        drawPanel.getCurrentDrawPage().setDrawLineSheet( dConfig.isDrawLineSheet() );
        
        g.setStrokeColor( dConfig.getColors().get( "gc" ) );
        g.setDistance( dConfig.getGridDistance() );
        drawPanel.getCurrentDrawPage().setDrawGrid( dConfig.isDrawGrid() );
        
        configureLineSheetAndGridGUI();
        
        mainToolBar.repaint();
        
        drawPanel.setBackgroundColor( colorPanelBackground.getColor() );
        drawPanel.repaint();
        
        colorPanelSC1.setColor( dConfig.getColors().get( "sc1" ) );
        colorPanelSC2.setColor( dConfig.getColors().get( "sc2" ) );
        colorPanelSC3.setColor( dConfig.getColors().get( "sc3" ) );
        colorPanelSC4.setColor( dConfig.getColors().get( "sc4" ) );
        colorPanelSC5.setColor( dConfig.getColors().get( "sc5" ) );
        colorPanelSC6.setColor( dConfig.getColors().get( "sc6" ) );
        colorPanelSC7.setColor( dConfig.getColors().get( "sc7" ) );
        colorPanelSC8.setColor( dConfig.getColors().get( "sc8" ) );
        
        colorPanelFC1.setColor( dConfig.getColors().get( "fc1" ) );
        colorPanelFC2.setColor( dConfig.getColors().get( "fc2" ) );
        colorPanelFC3.setColor( dConfig.getColors().get( "fc3" ) );
        colorPanelFC4.setColor( dConfig.getColors().get( "fc4" ) );
        colorPanelFC5.setColor( dConfig.getColors().get( "fc5" ) );
        colorPanelFC6.setColor( dConfig.getColors().get( "fc6" ) );
        colorPanelFC7.setColor( dConfig.getColors().get( "fc7" ) );
        colorPanelFC8.setColor( dConfig.getColors().get( "fc8" ) );
        
        paletteToolBar.repaint();
        
    }
    
    private void dispatchMouseEvent( Component component, int type, int button ) {
        
        dConfig.setProcessEventsMainWindow( false );
        component.dispatchEvent( new MouseEvent(
                component, type, System.currentTimeMillis(), 
                button, 0, 0, 1, true ) );
        dConfig.setProcessEventsMainWindow( true );
        
    }
    
    private void dispatchActionEvent( AbstractButton component ) {
        
        dConfig.setProcessEventsMainWindow( false );
        
        ActionEvent event = new ActionEvent( component, ActionEvent.ACTION_PERFORMED, "Anything", System.currentTimeMillis(), 0 );

        for (ActionListener listener : component.getActionListeners() ) {
            listener.actionPerformed(event);
        }
        
        dConfig.setProcessEventsMainWindow( true );
        
    }
    
    private void createSelectedRepaintRunnable() {
        if ( selectedRepaintRunnable == null ) {
            selectedRepaintRunnable = new SelectedRepaintRunnable();
            new Thread( selectedRepaintRunnable ).start();
        }
    }
    
    private void destroySelectedRepaintRunnable() {
        if ( selectedRepaintRunnable != null ) {
            selectedRepaintRunnable.stop();
            selectedRepaintRunnable = null;
        }
    }
    
    private class SelectedRepaintRunnable implements Runnable {

        boolean running;
        
        @Override
        public void run() {
            running = true;
            while ( running ) {
                drawPanel.repaint();
                try {
                    Thread.sleep( 50 );
                } catch ( InterruptedException exc ) {
                    running = false;
                }
            }
        }
        
        void stop() {
            running = false;
        }

        public boolean isRunning() {
            return running;
        }
        
    }

    private void drawWhenShiftIsDown( MouseEvent evt, Shape shape ) {
        
        double dx = evt.getX() - xPressed;
        double dy = evt.getY() - yPressed;

        if ( shape instanceof Line ) {
            
            double dd = Math.abs( Math.abs( dx ) - Math.abs( dy ) );
                    
            if ( dd < 50 ) {
                drawDiagonal( evt, shape, dx, dy );
            } else if ( Math.abs( dx ) > Math.abs( dy ) ) {
                shape.setXEnd( evt.getX() );
                shape.setYEnd( yPressed );
            } else {
                shape.setXEnd( xPressed );
                shape.setYEnd( evt.getY() );
            }
            
        } else {
            drawDiagonal( evt, shape, dx, dy );
        }
        
    }
    
    private void drawDiagonal( MouseEvent evt, Shape shape, double dx, double dy ) {
        
        if ( dx > 0 && dy > 0 ) {
            shape.setXEnd( xPressed + dx );
            shape.setYEnd( yPressed + dx );
        } else if ( dx > 0 && dy < 0 ) {
            shape.setXEnd( xPressed - dy );
            shape.setYEnd( yPressed + dy );
        } else if ( dx < 0 && dy > 0 ) {
            shape.setXEnd( xPressed - dy );
            shape.setYEnd( yPressed + dy );
        } else {
            shape.setXEnd( xPressed + dx );
            shape.setYEnd( yPressed + dx );
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddImage;
    private javax.swing.JToggleButton btnAddText;
    private javax.swing.JToggleButton btnBrush;
    private javax.swing.JButton btnClearCurrentDrawPage;
    private javax.swing.JToggleButton btnDrawGrid;
    private javax.swing.JToggleButton btnDrawLineSheet;
    private javax.swing.JToggleButton btnEllipse;
    private javax.swing.JToggleButton btnEraser;
    private javax.swing.JToggleButton btnFill;
    private javax.swing.JButton btnHelpAndAcount;
    private javax.swing.JToggleButton btnLine;
    private javax.swing.JToggleButton btnMove;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPalette;
    private javax.swing.JToggleButton btnPencil;
    private javax.swing.JToggleButton btnPolygon;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnPrintScreen;
    private javax.swing.JButton btnQuit;
    private javax.swing.JToggleButton btnRectangle;
    private javax.swing.JButton btnRedo;
    private javax.swing.JToggleButton btnRoundRectangle;
    private javax.swing.JButton btnSave;
    private javax.swing.JToggleButton btnStar;
    private javax.swing.JButton btnUndo;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.ButtonGroup buttonGroupGridConfig;
    private javax.swing.ButtonGroup buttonGroupLineSheetConfig;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelBackground;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC1;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC2;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC3;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC4;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC5;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC6;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC7;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFC8;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelFill;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC1;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC2;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC3;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC4;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC5;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC6;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC7;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelSC8;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.ColorPanel colorPanelStroke;
    private br.com.davidbuzatto.computersupportedclasshelper.gui.DrawPanel drawPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JPopupMenu.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JLabel lblPages;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JMenuItem menuItemBackwards;
    private javax.swing.JMenuItem menuItemDuplicate;
    private javax.swing.JMenuItem menuItemEditText;
    private javax.swing.JMenuItem menuItemForwards;
    private javax.swing.JMenuItem menuItemGridColor;
    private javax.swing.JMenuItem menuItemLineSheetColor;
    private javax.swing.JMenuItem menuItemMoveBack;
    private javax.swing.JMenuItem menuItemMoveFront;
    private javax.swing.JMenuItem menuItemNoColor;
    private javax.swing.JMenuItem menuItemRemove;
    private javax.swing.JMenu menuMoveBack;
    private javax.swing.JMenu menuMoveFront;
    private javax.swing.JToolBar paletteToolBar;
    private javax.swing.JPanel panelC1;
    private javax.swing.JPanel panelC2;
    private javax.swing.JPanel panelC3;
    private javax.swing.JPanel panelC4;
    private javax.swing.JPanel panelC5;
    private javax.swing.JPanel panelC6;
    private javax.swing.JPanel panelC7;
    private javax.swing.JPanel panelC8;
    private javax.swing.JPopupMenu popupMenuGrid;
    private javax.swing.JPopupMenu popupMenuLineSheet;
    private javax.swing.JPopupMenu popupMenuNoColor;
    private javax.swing.JPopupMenu popupMenuShapeOptions;
    private javax.swing.JRadioButtonMenuItem radioItemGridBig;
    private javax.swing.JRadioButtonMenuItem radioItemGridMedium;
    private javax.swing.JRadioButtonMenuItem radioItemGridSmall;
    private javax.swing.JRadioButtonMenuItem radioItemGridTiny;
    private javax.swing.JRadioButtonMenuItem radioItemLineSheetBig;
    private javax.swing.JRadioButtonMenuItem radioItemLineSheetMedium;
    private javax.swing.JRadioButtonMenuItem radioItemLineSheetSmall;
    private javax.swing.JRadioButtonMenuItem radioItemLineSheetTiny;
    private javax.swing.JPopupMenu.Separator sepShapeOptions1;
    private javax.swing.JPopupMenu.Separator sepShapeOptions2;
    private javax.swing.JPopupMenu.Separator sepShapeOptions3;
    private javax.swing.JToolBar statusToolBar;
    // End of variables declaration//GEN-END:variables
}
